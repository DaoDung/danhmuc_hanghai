/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.IssueShiftingOrder;
import vn.gt.dao.noticeandmessage.model.IssueShiftingOrderModel;
import vn.gt.dao.noticeandmessage.model.IssueShiftingOrderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the IssueShiftingOrder service. Represents a row in the &quot;ISSUE_SHIFTING_ORDER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.IssueShiftingOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueShiftingOrderImpl}.
 * </p>
 *
 * @author win_64
 * @see IssueShiftingOrderImpl
 * @see vn.gt.dao.noticeandmessage.model.IssueShiftingOrder
 * @see vn.gt.dao.noticeandmessage.model.IssueShiftingOrderModel
 * @generated
 */
@JSON(strict = true)
public class IssueShiftingOrderModelImpl extends BaseModelImpl<IssueShiftingOrder>
	implements IssueShiftingOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue shifting order model instance should use the {@link vn.gt.dao.noticeandmessage.model.IssueShiftingOrder} interface instead.
	 */
	public static final String TABLE_NAME = "ISSUE_SHIFTING_ORDER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "NumberShiftingOrder", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "PortofAuthority", Types.VARCHAR },
			{ "NameOfShip", Types.VARCHAR },
			{ "FlagStateOfShip", Types.VARCHAR },
			{ "AnchoringPortCode", Types.VARCHAR },
			{ "AnchoringPortWharfCode", Types.VARCHAR },
			{ "PortHarbourCode", Types.VARCHAR },
			{ "ShiftingPortWharfCode", Types.VARCHAR },
			{ "ShiftingDate", Types.TIMESTAMP },
			{ "ReasonToShift", Types.VARCHAR },
			{ "IssueDate", Types.TIMESTAMP },
			{ "DirectorOfMaritime", Types.VARCHAR },
			{ "CertificateNo", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "VersionNo", Types.VARCHAR },
			{ "IsApproval", Types.INTEGER },
			{ "ApprovalDate", Types.TIMESTAMP },
			{ "ApprovalName", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR },
			{ "IsCancel", Types.INTEGER },
			{ "CancelDate", Types.TIMESTAMP },
			{ "CancelName", Types.VARCHAR },
			{ "CancelNote", Types.VARCHAR },
			{ "Representative", Types.VARCHAR },
			{ "DigitalAttachedFile", Types.BIGINT },
			{ "SignDate", Types.TIMESTAMP },
			{ "SignName", Types.VARCHAR },
			{ "SignTitle", Types.VARCHAR },
			{ "SignPlace", Types.VARCHAR },
			{ "StampStatus", Types.INTEGER },
			{ "AttachedFile", Types.BIGINT },
			{ "ShownDraftxF", Types.DOUBLE },
			{ "UnitShownDraftxF", Types.VARCHAR },
			{ "ShownDraftxA", Types.DOUBLE },
			{ "UnitShownDraftxA", Types.VARCHAR },
			{ "LOA", Types.DOUBLE },
			{ "LOAUNIT", Types.VARCHAR },
			{ "DWT", Types.DOUBLE },
			{ "DWTUNIT", Types.VARCHAR },
			{ "TugBoat", Types.VARCHAR },
			{ "From_", Types.VARCHAR },
			{ "To_", Types.VARCHAR },
			{ "TaxCodeOfShipownersAgents", Types.VARCHAR },
			{ "NameOfShipownersAgents", Types.VARCHAR },
			{ "ShipAgencyAddress", Types.VARCHAR },
			{ "ShipAgencyPhone", Types.VARCHAR },
			{ "ShipAgencyFax", Types.VARCHAR },
			{ "ShipAgencyEmail", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ISSUE_SHIFTING_ORDER (ID LONG not null primary key,RequestCode VARCHAR(75) null,NumberShiftingOrder VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,PortofAuthority VARCHAR(75) null,NameOfShip VARCHAR(75) null,FlagStateOfShip VARCHAR(75) null,AnchoringPortCode VARCHAR(75) null,AnchoringPortWharfCode VARCHAR(75) null,PortHarbourCode VARCHAR(75) null,ShiftingPortWharfCode VARCHAR(75) null,ShiftingDate DATE null,ReasonToShift VARCHAR(75) null,IssueDate DATE null,DirectorOfMaritime VARCHAR(75) null,CertificateNo VARCHAR(75) null,RequestState INTEGER,VersionNo VARCHAR(75) null,IsApproval INTEGER,ApprovalDate DATE null,ApprovalName VARCHAR(75) null,Remarks VARCHAR(75) null,IsCancel INTEGER,CancelDate DATE null,CancelName VARCHAR(75) null,CancelNote VARCHAR(75) null,Representative VARCHAR(75) null,DigitalAttachedFile LONG,SignDate DATE null,SignName VARCHAR(75) null,SignTitle VARCHAR(75) null,SignPlace VARCHAR(75) null,StampStatus INTEGER,AttachedFile LONG,ShownDraftxF DOUBLE,UnitShownDraftxF VARCHAR(75) null,ShownDraftxA DOUBLE,UnitShownDraftxA VARCHAR(75) null,LOA DOUBLE,LOAUNIT VARCHAR(75) null,DWT DOUBLE,DWTUNIT VARCHAR(75) null,TugBoat VARCHAR(75) null,From_ VARCHAR(75) null,To_ VARCHAR(75) null,TaxCodeOfShipownersAgents VARCHAR(75) null,NameOfShipownersAgents VARCHAR(75) null,ShipAgencyAddress VARCHAR(75) null,ShipAgencyPhone VARCHAR(75) null,ShipAgencyFax VARCHAR(75) null,ShipAgencyEmail VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ISSUE_SHIFTING_ORDER";
	public static final String ORDER_BY_JPQL = " ORDER BY issueShiftingOrder.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ISSUE_SHIFTING_ORDER.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.IssueShiftingOrder"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.IssueShiftingOrder"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.IssueShiftingOrder"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;
	public static long VERSIONNO_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IssueShiftingOrder toModel(IssueShiftingOrderSoap soapModel) {
		IssueShiftingOrder model = new IssueShiftingOrderImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setNumberShiftingOrder(soapModel.getNumberShiftingOrder());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setPortofAuthority(soapModel.getPortofAuthority());
		model.setNameOfShip(soapModel.getNameOfShip());
		model.setFlagStateOfShip(soapModel.getFlagStateOfShip());
		model.setAnchoringPortCode(soapModel.getAnchoringPortCode());
		model.setAnchoringPortWharfCode(soapModel.getAnchoringPortWharfCode());
		model.setPortHarbourCode(soapModel.getPortHarbourCode());
		model.setShiftingPortWharfCode(soapModel.getShiftingPortWharfCode());
		model.setShiftingDate(soapModel.getShiftingDate());
		model.setReasonToShift(soapModel.getReasonToShift());
		model.setIssueDate(soapModel.getIssueDate());
		model.setDirectorOfMaritime(soapModel.getDirectorOfMaritime());
		model.setCertificateNo(soapModel.getCertificateNo());
		model.setRequestState(soapModel.getRequestState());
		model.setVersionNo(soapModel.getVersionNo());
		model.setIsApproval(soapModel.getIsApproval());
		model.setApprovalDate(soapModel.getApprovalDate());
		model.setApprovalName(soapModel.getApprovalName());
		model.setRemarks(soapModel.getRemarks());
		model.setIsCancel(soapModel.getIsCancel());
		model.setCancelDate(soapModel.getCancelDate());
		model.setCancelName(soapModel.getCancelName());
		model.setCancelNote(soapModel.getCancelNote());
		model.setRepresentative(soapModel.getRepresentative());
		model.setDigitalAttachedFile(soapModel.getDigitalAttachedFile());
		model.setSignDate(soapModel.getSignDate());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setStampStatus(soapModel.getStampStatus());
		model.setAttachedFile(soapModel.getAttachedFile());
		model.setShownDraftxF(soapModel.getShownDraftxF());
		model.setUnitShownDraftxF(soapModel.getUnitShownDraftxF());
		model.setShownDraftxA(soapModel.getShownDraftxA());
		model.setUnitShownDraftxA(soapModel.getUnitShownDraftxA());
		model.setLoa(soapModel.getLoa());
		model.setLoaUnit(soapModel.getLoaUnit());
		model.setDwt(soapModel.getDwt());
		model.setDwtUnit(soapModel.getDwtUnit());
		model.setTugBoat(soapModel.getTugBoat());
		model.setFrom(soapModel.getFrom());
		model.setTo(soapModel.getTo());
		model.setTaxCodeOfShipownersAgents(soapModel.getTaxCodeOfShipownersAgents());
		model.setNameOfShipownersAgents(soapModel.getNameOfShipownersAgents());
		model.setShipAgencyAddress(soapModel.getShipAgencyAddress());
		model.setShipAgencyPhone(soapModel.getShipAgencyPhone());
		model.setShipAgencyFax(soapModel.getShipAgencyFax());
		model.setShipAgencyEmail(soapModel.getShipAgencyEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IssueShiftingOrder> toModels(
		IssueShiftingOrderSoap[] soapModels) {
		List<IssueShiftingOrder> models = new ArrayList<IssueShiftingOrder>(soapModels.length);

		for (IssueShiftingOrderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.IssueShiftingOrder"));

	public IssueShiftingOrderModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return IssueShiftingOrder.class;
	}

	public String getModelClassName() {
		return IssueShiftingOrder.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public String getNumberShiftingOrder() {
		if (_numberShiftingOrder == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberShiftingOrder;
		}
	}

	public void setNumberShiftingOrder(String numberShiftingOrder) {
		_numberShiftingOrder = numberShiftingOrder;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public String getPortofAuthority() {
		if (_portofAuthority == null) {
			return StringPool.BLANK;
		}
		else {
			return _portofAuthority;
		}
	}

	public void setPortofAuthority(String portofAuthority) {
		_portofAuthority = portofAuthority;
	}

	@JSON
	public String getNameOfShip() {
		if (_nameOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShip;
		}
	}

	public void setNameOfShip(String nameOfShip) {
		_nameOfShip = nameOfShip;
	}

	@JSON
	public String getFlagStateOfShip() {
		if (_flagStateOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagStateOfShip;
		}
	}

	public void setFlagStateOfShip(String flagStateOfShip) {
		_flagStateOfShip = flagStateOfShip;
	}

	@JSON
	public String getAnchoringPortCode() {
		if (_anchoringPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _anchoringPortCode;
		}
	}

	public void setAnchoringPortCode(String anchoringPortCode) {
		_anchoringPortCode = anchoringPortCode;
	}

	@JSON
	public String getAnchoringPortWharfCode() {
		if (_anchoringPortWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _anchoringPortWharfCode;
		}
	}

	public void setAnchoringPortWharfCode(String anchoringPortWharfCode) {
		_anchoringPortWharfCode = anchoringPortWharfCode;
	}

	@JSON
	public String getPortHarbourCode() {
		if (_portHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourCode;
		}
	}

	public void setPortHarbourCode(String portHarbourCode) {
		_portHarbourCode = portHarbourCode;
	}

	@JSON
	public String getShiftingPortWharfCode() {
		if (_shiftingPortWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shiftingPortWharfCode;
		}
	}

	public void setShiftingPortWharfCode(String shiftingPortWharfCode) {
		_shiftingPortWharfCode = shiftingPortWharfCode;
	}

	@JSON
	public Date getShiftingDate() {
		return _shiftingDate;
	}

	public void setShiftingDate(Date shiftingDate) {
		_shiftingDate = shiftingDate;
	}

	@JSON
	public String getReasonToShift() {
		if (_reasonToShift == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonToShift;
		}
	}

	public void setReasonToShift(String reasonToShift) {
		_reasonToShift = reasonToShift;
	}

	@JSON
	public Date getIssueDate() {
		return _issueDate;
	}

	public void setIssueDate(Date issueDate) {
		_issueDate = issueDate;
	}

	@JSON
	public String getDirectorOfMaritime() {
		if (_directorOfMaritime == null) {
			return StringPool.BLANK;
		}
		else {
			return _directorOfMaritime;
		}
	}

	public void setDirectorOfMaritime(String directorOfMaritime) {
		_directorOfMaritime = directorOfMaritime;
	}

	@JSON
	public String getCertificateNo() {
		if (_certificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNo;
		}
	}

	public void setCertificateNo(String certificateNo) {
		_certificateNo = certificateNo;
	}

	@JSON
	public int getRequestState() {
		return _requestState;
	}

	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	public String getVersionNo() {
		if (_versionNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionNo;
		}
	}

	public void setVersionNo(String versionNo) {
		_columnBitmask |= VERSIONNO_COLUMN_BITMASK;

		if (_originalVersionNo == null) {
			_originalVersionNo = _versionNo;
		}

		_versionNo = versionNo;
	}

	public String getOriginalVersionNo() {
		return GetterUtil.getString(_originalVersionNo);
	}

	@JSON
	public int getIsApproval() {
		return _isApproval;
	}

	public void setIsApproval(int isApproval) {
		_isApproval = isApproval;
	}

	@JSON
	public Date getApprovalDate() {
		return _approvalDate;
	}

	public void setApprovalDate(Date approvalDate) {
		_approvalDate = approvalDate;
	}

	@JSON
	public String getApprovalName() {
		if (_approvalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvalName;
		}
	}

	public void setApprovalName(String approvalName) {
		_approvalName = approvalName;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	public int getIsCancel() {
		return _isCancel;
	}

	public void setIsCancel(int isCancel) {
		_isCancel = isCancel;
	}

	@JSON
	public Date getCancelDate() {
		return _cancelDate;
	}

	public void setCancelDate(Date cancelDate) {
		_cancelDate = cancelDate;
	}

	@JSON
	public String getCancelName() {
		if (_cancelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelName;
		}
	}

	public void setCancelName(String cancelName) {
		_cancelName = cancelName;
	}

	@JSON
	public String getCancelNote() {
		if (_cancelNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelNote;
		}
	}

	public void setCancelNote(String cancelNote) {
		_cancelNote = cancelNote;
	}

	@JSON
	public String getRepresentative() {
		if (_representative == null) {
			return StringPool.BLANK;
		}
		else {
			return _representative;
		}
	}

	public void setRepresentative(String representative) {
		_representative = representative;
	}

	@JSON
	public long getDigitalAttachedFile() {
		return _digitalAttachedFile;
	}

	public void setDigitalAttachedFile(long digitalAttachedFile) {
		_digitalAttachedFile = digitalAttachedFile;
	}

	@JSON
	public Date getSignDate() {
		return _signDate;
	}

	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	public int getStampStatus() {
		return _stampStatus;
	}

	public void setStampStatus(int stampStatus) {
		_stampStatus = stampStatus;
	}

	@JSON
	public long getAttachedFile() {
		return _attachedFile;
	}

	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	@JSON
	public double getShownDraftxF() {
		return _shownDraftxF;
	}

	public void setShownDraftxF(double shownDraftxF) {
		_shownDraftxF = shownDraftxF;
	}

	@JSON
	public String getUnitShownDraftxF() {
		if (_unitShownDraftxF == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxF;
		}
	}

	public void setUnitShownDraftxF(String unitShownDraftxF) {
		_unitShownDraftxF = unitShownDraftxF;
	}

	@JSON
	public double getShownDraftxA() {
		return _shownDraftxA;
	}

	public void setShownDraftxA(double shownDraftxA) {
		_shownDraftxA = shownDraftxA;
	}

	@JSON
	public String getUnitShownDraftxA() {
		if (_unitShownDraftxA == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxA;
		}
	}

	public void setUnitShownDraftxA(String unitShownDraftxA) {
		_unitShownDraftxA = unitShownDraftxA;
	}

	@JSON
	public double getLoa() {
		return _loa;
	}

	public void setLoa(double loa) {
		_loa = loa;
	}

	@JSON
	public String getLoaUnit() {
		if (_loaUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _loaUnit;
		}
	}

	public void setLoaUnit(String loaUnit) {
		_loaUnit = loaUnit;
	}

	@JSON
	public double getDwt() {
		return _dwt;
	}

	public void setDwt(double dwt) {
		_dwt = dwt;
	}

	@JSON
	public String getDwtUnit() {
		if (_dwtUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _dwtUnit;
		}
	}

	public void setDwtUnit(String dwtUnit) {
		_dwtUnit = dwtUnit;
	}

	@JSON
	public String getTugBoat() {
		if (_tugBoat == null) {
			return StringPool.BLANK;
		}
		else {
			return _tugBoat;
		}
	}

	public void setTugBoat(String tugBoat) {
		_tugBoat = tugBoat;
	}

	@JSON
	public String getFrom() {
		if (_from == null) {
			return StringPool.BLANK;
		}
		else {
			return _from;
		}
	}

	public void setFrom(String from) {
		_from = from;
	}

	@JSON
	public String getTo() {
		if (_to == null) {
			return StringPool.BLANK;
		}
		else {
			return _to;
		}
	}

	public void setTo(String to) {
		_to = to;
	}

	@JSON
	public String getTaxCodeOfShipownersAgents() {
		if (_taxCodeOfShipownersAgents == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxCodeOfShipownersAgents;
		}
	}

	public void setTaxCodeOfShipownersAgents(String taxCodeOfShipownersAgents) {
		_taxCodeOfShipownersAgents = taxCodeOfShipownersAgents;
	}

	@JSON
	public String getNameOfShipownersAgents() {
		if (_nameOfShipownersAgents == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShipownersAgents;
		}
	}

	public void setNameOfShipownersAgents(String nameOfShipownersAgents) {
		_nameOfShipownersAgents = nameOfShipownersAgents;
	}

	@JSON
	public String getShipAgencyAddress() {
		if (_shipAgencyAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyAddress;
		}
	}

	public void setShipAgencyAddress(String shipAgencyAddress) {
		_shipAgencyAddress = shipAgencyAddress;
	}

	@JSON
	public String getShipAgencyPhone() {
		if (_shipAgencyPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyPhone;
		}
	}

	public void setShipAgencyPhone(String shipAgencyPhone) {
		_shipAgencyPhone = shipAgencyPhone;
	}

	@JSON
	public String getShipAgencyFax() {
		if (_shipAgencyFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyFax;
		}
	}

	public void setShipAgencyFax(String shipAgencyFax) {
		_shipAgencyFax = shipAgencyFax;
	}

	@JSON
	public String getShipAgencyEmail() {
		if (_shipAgencyEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyEmail;
		}
	}

	public void setShipAgencyEmail(String shipAgencyEmail) {
		_shipAgencyEmail = shipAgencyEmail;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public IssueShiftingOrder toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (IssueShiftingOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					IssueShiftingOrder.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		IssueShiftingOrderImpl issueShiftingOrderImpl = new IssueShiftingOrderImpl();

		issueShiftingOrderImpl.setId(getId());
		issueShiftingOrderImpl.setRequestCode(getRequestCode());
		issueShiftingOrderImpl.setNumberShiftingOrder(getNumberShiftingOrder());
		issueShiftingOrderImpl.setDocumentName(getDocumentName());
		issueShiftingOrderImpl.setDocumentYear(getDocumentYear());
		issueShiftingOrderImpl.setPortofAuthority(getPortofAuthority());
		issueShiftingOrderImpl.setNameOfShip(getNameOfShip());
		issueShiftingOrderImpl.setFlagStateOfShip(getFlagStateOfShip());
		issueShiftingOrderImpl.setAnchoringPortCode(getAnchoringPortCode());
		issueShiftingOrderImpl.setAnchoringPortWharfCode(getAnchoringPortWharfCode());
		issueShiftingOrderImpl.setPortHarbourCode(getPortHarbourCode());
		issueShiftingOrderImpl.setShiftingPortWharfCode(getShiftingPortWharfCode());
		issueShiftingOrderImpl.setShiftingDate(getShiftingDate());
		issueShiftingOrderImpl.setReasonToShift(getReasonToShift());
		issueShiftingOrderImpl.setIssueDate(getIssueDate());
		issueShiftingOrderImpl.setDirectorOfMaritime(getDirectorOfMaritime());
		issueShiftingOrderImpl.setCertificateNo(getCertificateNo());
		issueShiftingOrderImpl.setRequestState(getRequestState());
		issueShiftingOrderImpl.setVersionNo(getVersionNo());
		issueShiftingOrderImpl.setIsApproval(getIsApproval());
		issueShiftingOrderImpl.setApprovalDate(getApprovalDate());
		issueShiftingOrderImpl.setApprovalName(getApprovalName());
		issueShiftingOrderImpl.setRemarks(getRemarks());
		issueShiftingOrderImpl.setIsCancel(getIsCancel());
		issueShiftingOrderImpl.setCancelDate(getCancelDate());
		issueShiftingOrderImpl.setCancelName(getCancelName());
		issueShiftingOrderImpl.setCancelNote(getCancelNote());
		issueShiftingOrderImpl.setRepresentative(getRepresentative());
		issueShiftingOrderImpl.setDigitalAttachedFile(getDigitalAttachedFile());
		issueShiftingOrderImpl.setSignDate(getSignDate());
		issueShiftingOrderImpl.setSignName(getSignName());
		issueShiftingOrderImpl.setSignTitle(getSignTitle());
		issueShiftingOrderImpl.setSignPlace(getSignPlace());
		issueShiftingOrderImpl.setStampStatus(getStampStatus());
		issueShiftingOrderImpl.setAttachedFile(getAttachedFile());
		issueShiftingOrderImpl.setShownDraftxF(getShownDraftxF());
		issueShiftingOrderImpl.setUnitShownDraftxF(getUnitShownDraftxF());
		issueShiftingOrderImpl.setShownDraftxA(getShownDraftxA());
		issueShiftingOrderImpl.setUnitShownDraftxA(getUnitShownDraftxA());
		issueShiftingOrderImpl.setLoa(getLoa());
		issueShiftingOrderImpl.setLoaUnit(getLoaUnit());
		issueShiftingOrderImpl.setDwt(getDwt());
		issueShiftingOrderImpl.setDwtUnit(getDwtUnit());
		issueShiftingOrderImpl.setTugBoat(getTugBoat());
		issueShiftingOrderImpl.setFrom(getFrom());
		issueShiftingOrderImpl.setTo(getTo());
		issueShiftingOrderImpl.setTaxCodeOfShipownersAgents(getTaxCodeOfShipownersAgents());
		issueShiftingOrderImpl.setNameOfShipownersAgents(getNameOfShipownersAgents());
		issueShiftingOrderImpl.setShipAgencyAddress(getShipAgencyAddress());
		issueShiftingOrderImpl.setShipAgencyPhone(getShipAgencyPhone());
		issueShiftingOrderImpl.setShipAgencyFax(getShipAgencyFax());
		issueShiftingOrderImpl.setShipAgencyEmail(getShipAgencyEmail());

		issueShiftingOrderImpl.resetOriginalValues();

		return issueShiftingOrderImpl;
	}

	public int compareTo(IssueShiftingOrder issueShiftingOrder) {
		int value = 0;

		if (getId() < issueShiftingOrder.getId()) {
			value = -1;
		}
		else if (getId() > issueShiftingOrder.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		IssueShiftingOrder issueShiftingOrder = null;

		try {
			issueShiftingOrder = (IssueShiftingOrder)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = issueShiftingOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		IssueShiftingOrderModelImpl issueShiftingOrderModelImpl = this;

		issueShiftingOrderModelImpl._originalRequestCode = issueShiftingOrderModelImpl._requestCode;

		issueShiftingOrderModelImpl._originalDocumentName = issueShiftingOrderModelImpl._documentName;

		issueShiftingOrderModelImpl._setOriginalDocumentName = false;

		issueShiftingOrderModelImpl._originalDocumentYear = issueShiftingOrderModelImpl._documentYear;

		issueShiftingOrderModelImpl._setOriginalDocumentYear = false;

		issueShiftingOrderModelImpl._originalRequestState = issueShiftingOrderModelImpl._requestState;

		issueShiftingOrderModelImpl._setOriginalRequestState = false;

		issueShiftingOrderModelImpl._originalVersionNo = issueShiftingOrderModelImpl._versionNo;

		issueShiftingOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IssueShiftingOrder> toCacheModel() {
		IssueShiftingOrderCacheModel issueShiftingOrderCacheModel = new IssueShiftingOrderCacheModel();

		issueShiftingOrderCacheModel.id = getId();

		issueShiftingOrderCacheModel.requestCode = getRequestCode();

		String requestCode = issueShiftingOrderCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			issueShiftingOrderCacheModel.requestCode = null;
		}

		issueShiftingOrderCacheModel.numberShiftingOrder = getNumberShiftingOrder();

		String numberShiftingOrder = issueShiftingOrderCacheModel.numberShiftingOrder;

		if ((numberShiftingOrder != null) &&
				(numberShiftingOrder.length() == 0)) {
			issueShiftingOrderCacheModel.numberShiftingOrder = null;
		}

		issueShiftingOrderCacheModel.documentName = getDocumentName();

		issueShiftingOrderCacheModel.documentYear = getDocumentYear();

		issueShiftingOrderCacheModel.portofAuthority = getPortofAuthority();

		String portofAuthority = issueShiftingOrderCacheModel.portofAuthority;

		if ((portofAuthority != null) && (portofAuthority.length() == 0)) {
			issueShiftingOrderCacheModel.portofAuthority = null;
		}

		issueShiftingOrderCacheModel.nameOfShip = getNameOfShip();

		String nameOfShip = issueShiftingOrderCacheModel.nameOfShip;

		if ((nameOfShip != null) && (nameOfShip.length() == 0)) {
			issueShiftingOrderCacheModel.nameOfShip = null;
		}

		issueShiftingOrderCacheModel.flagStateOfShip = getFlagStateOfShip();

		String flagStateOfShip = issueShiftingOrderCacheModel.flagStateOfShip;

		if ((flagStateOfShip != null) && (flagStateOfShip.length() == 0)) {
			issueShiftingOrderCacheModel.flagStateOfShip = null;
		}

		issueShiftingOrderCacheModel.anchoringPortCode = getAnchoringPortCode();

		String anchoringPortCode = issueShiftingOrderCacheModel.anchoringPortCode;

		if ((anchoringPortCode != null) && (anchoringPortCode.length() == 0)) {
			issueShiftingOrderCacheModel.anchoringPortCode = null;
		}

		issueShiftingOrderCacheModel.anchoringPortWharfCode = getAnchoringPortWharfCode();

		String anchoringPortWharfCode = issueShiftingOrderCacheModel.anchoringPortWharfCode;

		if ((anchoringPortWharfCode != null) &&
				(anchoringPortWharfCode.length() == 0)) {
			issueShiftingOrderCacheModel.anchoringPortWharfCode = null;
		}

		issueShiftingOrderCacheModel.portHarbourCode = getPortHarbourCode();

		String portHarbourCode = issueShiftingOrderCacheModel.portHarbourCode;

		if ((portHarbourCode != null) && (portHarbourCode.length() == 0)) {
			issueShiftingOrderCacheModel.portHarbourCode = null;
		}

		issueShiftingOrderCacheModel.shiftingPortWharfCode = getShiftingPortWharfCode();

		String shiftingPortWharfCode = issueShiftingOrderCacheModel.shiftingPortWharfCode;

		if ((shiftingPortWharfCode != null) &&
				(shiftingPortWharfCode.length() == 0)) {
			issueShiftingOrderCacheModel.shiftingPortWharfCode = null;
		}

		Date shiftingDate = getShiftingDate();

		if (shiftingDate != null) {
			issueShiftingOrderCacheModel.shiftingDate = shiftingDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.shiftingDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.reasonToShift = getReasonToShift();

		String reasonToShift = issueShiftingOrderCacheModel.reasonToShift;

		if ((reasonToShift != null) && (reasonToShift.length() == 0)) {
			issueShiftingOrderCacheModel.reasonToShift = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			issueShiftingOrderCacheModel.issueDate = issueDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.issueDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.directorOfMaritime = getDirectorOfMaritime();

		String directorOfMaritime = issueShiftingOrderCacheModel.directorOfMaritime;

		if ((directorOfMaritime != null) && (directorOfMaritime.length() == 0)) {
			issueShiftingOrderCacheModel.directorOfMaritime = null;
		}

		issueShiftingOrderCacheModel.certificateNo = getCertificateNo();

		String certificateNo = issueShiftingOrderCacheModel.certificateNo;

		if ((certificateNo != null) && (certificateNo.length() == 0)) {
			issueShiftingOrderCacheModel.certificateNo = null;
		}

		issueShiftingOrderCacheModel.requestState = getRequestState();

		issueShiftingOrderCacheModel.versionNo = getVersionNo();

		String versionNo = issueShiftingOrderCacheModel.versionNo;

		if ((versionNo != null) && (versionNo.length() == 0)) {
			issueShiftingOrderCacheModel.versionNo = null;
		}

		issueShiftingOrderCacheModel.isApproval = getIsApproval();

		Date approvalDate = getApprovalDate();

		if (approvalDate != null) {
			issueShiftingOrderCacheModel.approvalDate = approvalDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.approvalDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.approvalName = getApprovalName();

		String approvalName = issueShiftingOrderCacheModel.approvalName;

		if ((approvalName != null) && (approvalName.length() == 0)) {
			issueShiftingOrderCacheModel.approvalName = null;
		}

		issueShiftingOrderCacheModel.remarks = getRemarks();

		String remarks = issueShiftingOrderCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			issueShiftingOrderCacheModel.remarks = null;
		}

		issueShiftingOrderCacheModel.isCancel = getIsCancel();

		Date cancelDate = getCancelDate();

		if (cancelDate != null) {
			issueShiftingOrderCacheModel.cancelDate = cancelDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.cancelDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.cancelName = getCancelName();

		String cancelName = issueShiftingOrderCacheModel.cancelName;

		if ((cancelName != null) && (cancelName.length() == 0)) {
			issueShiftingOrderCacheModel.cancelName = null;
		}

		issueShiftingOrderCacheModel.cancelNote = getCancelNote();

		String cancelNote = issueShiftingOrderCacheModel.cancelNote;

		if ((cancelNote != null) && (cancelNote.length() == 0)) {
			issueShiftingOrderCacheModel.cancelNote = null;
		}

		issueShiftingOrderCacheModel.representative = getRepresentative();

		String representative = issueShiftingOrderCacheModel.representative;

		if ((representative != null) && (representative.length() == 0)) {
			issueShiftingOrderCacheModel.representative = null;
		}

		issueShiftingOrderCacheModel.digitalAttachedFile = getDigitalAttachedFile();

		Date signDate = getSignDate();

		if (signDate != null) {
			issueShiftingOrderCacheModel.signDate = signDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.signDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.signName = getSignName();

		String signName = issueShiftingOrderCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			issueShiftingOrderCacheModel.signName = null;
		}

		issueShiftingOrderCacheModel.signTitle = getSignTitle();

		String signTitle = issueShiftingOrderCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			issueShiftingOrderCacheModel.signTitle = null;
		}

		issueShiftingOrderCacheModel.signPlace = getSignPlace();

		String signPlace = issueShiftingOrderCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			issueShiftingOrderCacheModel.signPlace = null;
		}

		issueShiftingOrderCacheModel.stampStatus = getStampStatus();

		issueShiftingOrderCacheModel.attachedFile = getAttachedFile();

		issueShiftingOrderCacheModel.shownDraftxF = getShownDraftxF();

		issueShiftingOrderCacheModel.unitShownDraftxF = getUnitShownDraftxF();

		String unitShownDraftxF = issueShiftingOrderCacheModel.unitShownDraftxF;

		if ((unitShownDraftxF != null) && (unitShownDraftxF.length() == 0)) {
			issueShiftingOrderCacheModel.unitShownDraftxF = null;
		}

		issueShiftingOrderCacheModel.shownDraftxA = getShownDraftxA();

		issueShiftingOrderCacheModel.unitShownDraftxA = getUnitShownDraftxA();

		String unitShownDraftxA = issueShiftingOrderCacheModel.unitShownDraftxA;

		if ((unitShownDraftxA != null) && (unitShownDraftxA.length() == 0)) {
			issueShiftingOrderCacheModel.unitShownDraftxA = null;
		}

		issueShiftingOrderCacheModel.loa = getLoa();

		issueShiftingOrderCacheModel.loaUnit = getLoaUnit();

		String loaUnit = issueShiftingOrderCacheModel.loaUnit;

		if ((loaUnit != null) && (loaUnit.length() == 0)) {
			issueShiftingOrderCacheModel.loaUnit = null;
		}

		issueShiftingOrderCacheModel.dwt = getDwt();

		issueShiftingOrderCacheModel.dwtUnit = getDwtUnit();

		String dwtUnit = issueShiftingOrderCacheModel.dwtUnit;

		if ((dwtUnit != null) && (dwtUnit.length() == 0)) {
			issueShiftingOrderCacheModel.dwtUnit = null;
		}

		issueShiftingOrderCacheModel.tugBoat = getTugBoat();

		String tugBoat = issueShiftingOrderCacheModel.tugBoat;

		if ((tugBoat != null) && (tugBoat.length() == 0)) {
			issueShiftingOrderCacheModel.tugBoat = null;
		}

		issueShiftingOrderCacheModel.from = getFrom();

		String from = issueShiftingOrderCacheModel.from;

		if ((from != null) && (from.length() == 0)) {
			issueShiftingOrderCacheModel.from = null;
		}

		issueShiftingOrderCacheModel.to = getTo();

		String to = issueShiftingOrderCacheModel.to;

		if ((to != null) && (to.length() == 0)) {
			issueShiftingOrderCacheModel.to = null;
		}

		issueShiftingOrderCacheModel.taxCodeOfShipownersAgents = getTaxCodeOfShipownersAgents();

		String taxCodeOfShipownersAgents = issueShiftingOrderCacheModel.taxCodeOfShipownersAgents;

		if ((taxCodeOfShipownersAgents != null) &&
				(taxCodeOfShipownersAgents.length() == 0)) {
			issueShiftingOrderCacheModel.taxCodeOfShipownersAgents = null;
		}

		issueShiftingOrderCacheModel.nameOfShipownersAgents = getNameOfShipownersAgents();

		String nameOfShipownersAgents = issueShiftingOrderCacheModel.nameOfShipownersAgents;

		if ((nameOfShipownersAgents != null) &&
				(nameOfShipownersAgents.length() == 0)) {
			issueShiftingOrderCacheModel.nameOfShipownersAgents = null;
		}

		issueShiftingOrderCacheModel.shipAgencyAddress = getShipAgencyAddress();

		String shipAgencyAddress = issueShiftingOrderCacheModel.shipAgencyAddress;

		if ((shipAgencyAddress != null) && (shipAgencyAddress.length() == 0)) {
			issueShiftingOrderCacheModel.shipAgencyAddress = null;
		}

		issueShiftingOrderCacheModel.shipAgencyPhone = getShipAgencyPhone();

		String shipAgencyPhone = issueShiftingOrderCacheModel.shipAgencyPhone;

		if ((shipAgencyPhone != null) && (shipAgencyPhone.length() == 0)) {
			issueShiftingOrderCacheModel.shipAgencyPhone = null;
		}

		issueShiftingOrderCacheModel.shipAgencyFax = getShipAgencyFax();

		String shipAgencyFax = issueShiftingOrderCacheModel.shipAgencyFax;

		if ((shipAgencyFax != null) && (shipAgencyFax.length() == 0)) {
			issueShiftingOrderCacheModel.shipAgencyFax = null;
		}

		issueShiftingOrderCacheModel.shipAgencyEmail = getShipAgencyEmail();

		String shipAgencyEmail = issueShiftingOrderCacheModel.shipAgencyEmail;

		if ((shipAgencyEmail != null) && (shipAgencyEmail.length() == 0)) {
			issueShiftingOrderCacheModel.shipAgencyEmail = null;
		}

		return issueShiftingOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(105);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", numberShiftingOrder=");
		sb.append(getNumberShiftingOrder());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", portofAuthority=");
		sb.append(getPortofAuthority());
		sb.append(", nameOfShip=");
		sb.append(getNameOfShip());
		sb.append(", flagStateOfShip=");
		sb.append(getFlagStateOfShip());
		sb.append(", anchoringPortCode=");
		sb.append(getAnchoringPortCode());
		sb.append(", anchoringPortWharfCode=");
		sb.append(getAnchoringPortWharfCode());
		sb.append(", portHarbourCode=");
		sb.append(getPortHarbourCode());
		sb.append(", shiftingPortWharfCode=");
		sb.append(getShiftingPortWharfCode());
		sb.append(", shiftingDate=");
		sb.append(getShiftingDate());
		sb.append(", reasonToShift=");
		sb.append(getReasonToShift());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", directorOfMaritime=");
		sb.append(getDirectorOfMaritime());
		sb.append(", certificateNo=");
		sb.append(getCertificateNo());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", isApproval=");
		sb.append(getIsApproval());
		sb.append(", approvalDate=");
		sb.append(getApprovalDate());
		sb.append(", approvalName=");
		sb.append(getApprovalName());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", isCancel=");
		sb.append(getIsCancel());
		sb.append(", cancelDate=");
		sb.append(getCancelDate());
		sb.append(", cancelName=");
		sb.append(getCancelName());
		sb.append(", cancelNote=");
		sb.append(getCancelNote());
		sb.append(", representative=");
		sb.append(getRepresentative());
		sb.append(", digitalAttachedFile=");
		sb.append(getDigitalAttachedFile());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", stampStatus=");
		sb.append(getStampStatus());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", shownDraftxF=");
		sb.append(getShownDraftxF());
		sb.append(", unitShownDraftxF=");
		sb.append(getUnitShownDraftxF());
		sb.append(", shownDraftxA=");
		sb.append(getShownDraftxA());
		sb.append(", unitShownDraftxA=");
		sb.append(getUnitShownDraftxA());
		sb.append(", loa=");
		sb.append(getLoa());
		sb.append(", loaUnit=");
		sb.append(getLoaUnit());
		sb.append(", dwt=");
		sb.append(getDwt());
		sb.append(", dwtUnit=");
		sb.append(getDwtUnit());
		sb.append(", tugBoat=");
		sb.append(getTugBoat());
		sb.append(", from=");
		sb.append(getFrom());
		sb.append(", to=");
		sb.append(getTo());
		sb.append(", taxCodeOfShipownersAgents=");
		sb.append(getTaxCodeOfShipownersAgents());
		sb.append(", nameOfShipownersAgents=");
		sb.append(getNameOfShipownersAgents());
		sb.append(", shipAgencyAddress=");
		sb.append(getShipAgencyAddress());
		sb.append(", shipAgencyPhone=");
		sb.append(getShipAgencyPhone());
		sb.append(", shipAgencyFax=");
		sb.append(getShipAgencyFax());
		sb.append(", shipAgencyEmail=");
		sb.append(getShipAgencyEmail());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(160);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.IssueShiftingOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberShiftingOrder</column-name><column-value><![CDATA[");
		sb.append(getNumberShiftingOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portofAuthority</column-name><column-value><![CDATA[");
		sb.append(getPortofAuthority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShip</column-name><column-value><![CDATA[");
		sb.append(getNameOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagStateOfShip</column-name><column-value><![CDATA[");
		sb.append(getFlagStateOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anchoringPortCode</column-name><column-value><![CDATA[");
		sb.append(getAnchoringPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anchoringPortWharfCode</column-name><column-value><![CDATA[");
		sb.append(getAnchoringPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shiftingPortWharfCode</column-name><column-value><![CDATA[");
		sb.append(getShiftingPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shiftingDate</column-name><column-value><![CDATA[");
		sb.append(getShiftingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonToShift</column-name><column-value><![CDATA[");
		sb.append(getReasonToShift());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>directorOfMaritime</column-name><column-value><![CDATA[");
		sb.append(getDirectorOfMaritime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproval</column-name><column-value><![CDATA[");
		sb.append(getIsApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalDate</column-name><column-value><![CDATA[");
		sb.append(getApprovalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalName</column-name><column-value><![CDATA[");
		sb.append(getApprovalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCancel</column-name><column-value><![CDATA[");
		sb.append(getIsCancel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelDate</column-name><column-value><![CDATA[");
		sb.append(getCancelDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelName</column-name><column-value><![CDATA[");
		sb.append(getCancelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelNote</column-name><column-value><![CDATA[");
		sb.append(getCancelNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>representative</column-name><column-value><![CDATA[");
		sb.append(getRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>digitalAttachedFile</column-name><column-value><![CDATA[");
		sb.append(getDigitalAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampStatus</column-name><column-value><![CDATA[");
		sb.append(getStampStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shownDraftxF</column-name><column-value><![CDATA[");
		sb.append(getShownDraftxF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxF</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shownDraftxA</column-name><column-value><![CDATA[");
		sb.append(getShownDraftxA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxA</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loa</column-name><column-value><![CDATA[");
		sb.append(getLoa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loaUnit</column-name><column-value><![CDATA[");
		sb.append(getLoaUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwt</column-name><column-value><![CDATA[");
		sb.append(getDwt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwtUnit</column-name><column-value><![CDATA[");
		sb.append(getDwtUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tugBoat</column-name><column-value><![CDATA[");
		sb.append(getTugBoat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>from</column-name><column-value><![CDATA[");
		sb.append(getFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>to</column-name><column-value><![CDATA[");
		sb.append(getTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxCodeOfShipownersAgents</column-name><column-value><![CDATA[");
		sb.append(getTaxCodeOfShipownersAgents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShipownersAgents</column-name><column-value><![CDATA[");
		sb.append(getNameOfShipownersAgents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyAddress</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyPhone</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyFax</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyEmail</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyEmail());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IssueShiftingOrder.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			IssueShiftingOrder.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _numberShiftingOrder;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _portofAuthority;
	private String _nameOfShip;
	private String _flagStateOfShip;
	private String _anchoringPortCode;
	private String _anchoringPortWharfCode;
	private String _portHarbourCode;
	private String _shiftingPortWharfCode;
	private Date _shiftingDate;
	private String _reasonToShift;
	private Date _issueDate;
	private String _directorOfMaritime;
	private String _certificateNo;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private String _versionNo;
	private String _originalVersionNo;
	private int _isApproval;
	private Date _approvalDate;
	private String _approvalName;
	private String _remarks;
	private int _isCancel;
	private Date _cancelDate;
	private String _cancelName;
	private String _cancelNote;
	private String _representative;
	private long _digitalAttachedFile;
	private Date _signDate;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private int _stampStatus;
	private long _attachedFile;
	private double _shownDraftxF;
	private String _unitShownDraftxF;
	private double _shownDraftxA;
	private String _unitShownDraftxA;
	private double _loa;
	private String _loaUnit;
	private double _dwt;
	private String _dwtUnit;
	private String _tugBoat;
	private String _from;
	private String _to;
	private String _taxCodeOfShipownersAgents;
	private String _nameOfShipownersAgents;
	private String _shipAgencyAddress;
	private String _shipAgencyPhone;
	private String _shipAgencyFax;
	private String _shipAgencyEmail;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private IssueShiftingOrder _escapedModelProxy;
}