/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration;
import vn.gt.dao.noticeandmessage.model.TempGeneralDeclarationModel;
import vn.gt.dao.noticeandmessage.model.TempGeneralDeclarationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempGeneralDeclaration service. Represents a row in the &quot;TEMP_GENERAL_DECLARATION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempGeneralDeclarationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempGeneralDeclarationImpl}.
 * </p>
 *
 * @author win_64
 * @see TempGeneralDeclarationImpl
 * @see vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration
 * @see vn.gt.dao.noticeandmessage.model.TempGeneralDeclarationModel
 * @generated
 */
@JSON(strict = true)
public class TempGeneralDeclarationModelImpl extends BaseModelImpl<TempGeneralDeclaration>
	implements TempGeneralDeclarationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp general declaration model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_GENERAL_DECLARATION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentReference", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "UserCreated", Types.VARCHAR },
			{ "IsArrival", Types.INTEGER },
			{ "NameOfShip", Types.VARCHAR },
			{ "ShipTypeCode", Types.VARCHAR },
			{ "IMONumber", Types.VARCHAR },
			{ "CallSign", Types.VARCHAR },
			{ "VoyageNumber", Types.VARCHAR },
			{ "PortOfArrivalCode", Types.VARCHAR },
			{ "DateOfArrival", Types.TIMESTAMP },
			{ "PortHarbourCode", Types.VARCHAR },
			{ "PortRegionCode", Types.VARCHAR },
			{ "PortWharfCode", Types.VARCHAR },
			{ "FlagStateOfShip", Types.VARCHAR },
			{ "NameOfMaster", Types.VARCHAR },
			{ "LastPortOfCallCode", Types.VARCHAR },
			{ "CertificateOfRegistryNumber", Types.VARCHAR },
			{ "CertificateOfRegistryDate", Types.TIMESTAMP },
			{ "CertificateOfRegistryPortName", Types.VARCHAR },
			{ "TaxCodeOfShipownersAgents", Types.VARCHAR },
			{ "NameOfShipownersAgents", Types.VARCHAR },
			{ "ShipAgencyAddress", Types.VARCHAR },
			{ "ShipAgencyPhone", Types.VARCHAR },
			{ "ShipAgencyFax", Types.VARCHAR },
			{ "ShipAgencyEmail", Types.VARCHAR },
			{ "GrossTonnage", Types.DOUBLE },
			{ "NetTonnage", Types.DOUBLE },
			{ "PositionOfShipInPort", Types.VARCHAR },
			{ "BriefParticularsOfVoyage", Types.VARCHAR },
			{ "PreviousPortsOfCall", Types.VARCHAR },
			{ "SubsequentPortsOfCall", Types.VARCHAR },
			{ "DischargedPorts", Types.VARCHAR },
			{ "RemainingCargo", Types.VARCHAR },
			{ "BriefDescriptionOfTheCargo", Types.VARCHAR },
			{ "NumberOfCrew", Types.INTEGER },
			{ "NumberOfPassengers", Types.INTEGER },
			{ "ShipRequirementsInTermsOfWaste", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR },
			{ "NumberCargoDeclaration", Types.VARCHAR },
			{ "NumberShipStoreDeclaration", Types.VARCHAR },
			{ "NumberCrewList", Types.VARCHAR },
			{ "NumberPassengerList", Types.VARCHAR },
			{ "NumberCrewEffects", Types.VARCHAR },
			{ "NumberHealthMaritime", Types.VARCHAR },
			{ "SignPlace", Types.VARCHAR },
			{ "SignDate", Types.TIMESTAMP },
			{ "MasterSigned", Types.INTEGER },
			{ "MasterSignedImage", Types.INTEGER },
			{ "CargoOnBoard", Types.VARCHAR },
			{ "Cargo", Types.VARCHAR },
			{ "VolumeCargo", Types.DOUBLE },
			{ "CargoUnit", Types.VARCHAR },
			{ "CargoDescription", Types.VARCHAR },
			{ "RatedPower", Types.VARCHAR },
			{ "SeatingCapacity", Types.VARCHAR },
			{ "LyingCapacity", Types.VARCHAR },
			{ "MaritimePortCode", Types.VARCHAR },
			{ "LastProvinceCode", Types.VARCHAR },
			{ "NextProvinceCode", Types.VARCHAR },
			{ "LastMaritimePortCode", Types.VARCHAR },
			{ "LastPortRegionCode", Types.VARCHAR },
			{ "LastPortHarbourCode", Types.VARCHAR },
			{ "LastPortWharfCode", Types.VARCHAR },
			{ "NextMaritimePortCode", Types.VARCHAR },
			{ "NextPortRegionCode", Types.VARCHAR },
			{ "NextPortHarbourCode", Types.VARCHAR },
			{ "NextPortWharfCode", Types.VARCHAR },
			{ "Link", Types.VARCHAR },
			{ "QCCode", Types.VARCHAR },
			{ "PortClearanceNo", Types.VARCHAR },
			{ "LOA", Types.DOUBLE },
			{ "UnitLOA", Types.VARCHAR },
			{ "Breadth", Types.DOUBLE },
			{ "UnitBreadth", Types.VARCHAR },
			{ "ClearanceHeight", Types.DOUBLE },
			{ "UnitClearanceHeight", Types.VARCHAR },
			{ "ShownDraftxF", Types.DOUBLE },
			{ "UnitShownDraftxF", Types.VARCHAR },
			{ "ShownDraftxA", Types.DOUBLE },
			{ "UnitShownDraftxA", Types.VARCHAR },
			{ "DWT", Types.DOUBLE },
			{ "UnitDWT", Types.VARCHAR },
			{ "TimeOfPORTArrival", Types.TIMESTAMP },
			{ "TimeOfPilotOnBoard", Types.TIMESTAMP },
			{ "TugBoat", Types.VARCHAR },
			{ "DO_", Types.VARCHAR },
			{ "FO", Types.VARCHAR },
			{ "FW", Types.VARCHAR },
			{ "PlaceOfReception", Types.VARCHAR },
			{ "NameOfShipOwners", Types.VARCHAR },
			{ "AddressOfShipOwners", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_GENERAL_DECLARATION (ID LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,DocumentName LONG,DocumentReference LONG,DocumentYear INTEGER,UserCreated VARCHAR(75) null,IsArrival INTEGER,NameOfShip VARCHAR(75) null,ShipTypeCode VARCHAR(75) null,IMONumber VARCHAR(75) null,CallSign VARCHAR(75) null,VoyageNumber VARCHAR(75) null,PortOfArrivalCode VARCHAR(75) null,DateOfArrival DATE null,PortHarbourCode VARCHAR(75) null,PortRegionCode VARCHAR(75) null,PortWharfCode VARCHAR(75) null,FlagStateOfShip VARCHAR(75) null,NameOfMaster VARCHAR(75) null,LastPortOfCallCode VARCHAR(75) null,CertificateOfRegistryNumber VARCHAR(75) null,CertificateOfRegistryDate DATE null,CertificateOfRegistryPortName VARCHAR(75) null,TaxCodeOfShipownersAgents VARCHAR(75) null,NameOfShipownersAgents VARCHAR(75) null,ShipAgencyAddress VARCHAR(75) null,ShipAgencyPhone VARCHAR(75) null,ShipAgencyFax VARCHAR(75) null,ShipAgencyEmail VARCHAR(75) null,GrossTonnage DOUBLE,NetTonnage DOUBLE,PositionOfShipInPort VARCHAR(75) null,BriefParticularsOfVoyage VARCHAR(75) null,PreviousPortsOfCall VARCHAR(75) null,SubsequentPortsOfCall VARCHAR(75) null,DischargedPorts VARCHAR(75) null,RemainingCargo VARCHAR(75) null,BriefDescriptionOfTheCargo VARCHAR(75) null,NumberOfCrew INTEGER,NumberOfPassengers INTEGER,ShipRequirementsInTermsOfWaste VARCHAR(75) null,Remarks VARCHAR(75) null,NumberCargoDeclaration VARCHAR(75) null,NumberShipStoreDeclaration VARCHAR(75) null,NumberCrewList VARCHAR(75) null,NumberPassengerList VARCHAR(75) null,NumberCrewEffects VARCHAR(75) null,NumberHealthMaritime VARCHAR(75) null,SignPlace VARCHAR(75) null,SignDate DATE null,MasterSigned INTEGER,MasterSignedImage INTEGER,CargoOnBoard VARCHAR(75) null,Cargo VARCHAR(75) null,VolumeCargo DOUBLE,CargoUnit VARCHAR(75) null,CargoDescription VARCHAR(75) null,RatedPower VARCHAR(75) null,SeatingCapacity VARCHAR(75) null,LyingCapacity VARCHAR(75) null,MaritimePortCode VARCHAR(75) null,LastProvinceCode VARCHAR(75) null,NextProvinceCode VARCHAR(75) null,LastMaritimePortCode VARCHAR(75) null,LastPortRegionCode VARCHAR(75) null,LastPortHarbourCode VARCHAR(75) null,LastPortWharfCode VARCHAR(75) null,NextMaritimePortCode VARCHAR(75) null,NextPortRegionCode VARCHAR(75) null,NextPortHarbourCode VARCHAR(75) null,NextPortWharfCode VARCHAR(75) null,Link VARCHAR(75) null,QCCode VARCHAR(75) null,PortClearanceNo VARCHAR(75) null,LOA DOUBLE,UnitLOA VARCHAR(75) null,Breadth DOUBLE,UnitBreadth VARCHAR(75) null,ClearanceHeight DOUBLE,UnitClearanceHeight VARCHAR(75) null,ShownDraftxF DOUBLE,UnitShownDraftxF VARCHAR(75) null,ShownDraftxA DOUBLE,UnitShownDraftxA VARCHAR(75) null,DWT DOUBLE,UnitDWT VARCHAR(75) null,TimeOfPORTArrival DATE null,TimeOfPilotOnBoard DATE null,TugBoat VARCHAR(75) null,DO_ VARCHAR(75) null,FO VARCHAR(75) null,FW VARCHAR(75) null,PlaceOfReception VARCHAR(75) null,NameOfShipOwners VARCHAR(75) null,AddressOfShipOwners VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_GENERAL_DECLARATION";
	public static final String ORDER_BY_JPQL = " ORDER BY tempGeneralDeclaration.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_GENERAL_DECLARATION.ID DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempGeneralDeclaration toModel(
		TempGeneralDeclarationSoap soapModel) {
		TempGeneralDeclaration model = new TempGeneralDeclarationImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentReference(soapModel.getDocumentReference());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setUserCreated(soapModel.getUserCreated());
		model.setIsArrival(soapModel.getIsArrival());
		model.setNameOfShip(soapModel.getNameOfShip());
		model.setShipTypeCode(soapModel.getShipTypeCode());
		model.setImoNumber(soapModel.getImoNumber());
		model.setCallSign(soapModel.getCallSign());
		model.setVoyageNumber(soapModel.getVoyageNumber());
		model.setPortOfArrivalCode(soapModel.getPortOfArrivalCode());
		model.setDateOfArrival(soapModel.getDateOfArrival());
		model.setPortHarbourCode(soapModel.getPortHarbourCode());
		model.setPortRegionCode(soapModel.getPortRegionCode());
		model.setPortWharfCode(soapModel.getPortWharfCode());
		model.setFlagStateOfShip(soapModel.getFlagStateOfShip());
		model.setNameOfMaster(soapModel.getNameOfMaster());
		model.setLastPortOfCallCode(soapModel.getLastPortOfCallCode());
		model.setCertificateOfRegistryNumber(soapModel.getCertificateOfRegistryNumber());
		model.setCertificateOfRegistryDate(soapModel.getCertificateOfRegistryDate());
		model.setCertificateOfRegistryPortName(soapModel.getCertificateOfRegistryPortName());
		model.setTaxCodeOfShipownersAgents(soapModel.getTaxCodeOfShipownersAgents());
		model.setNameOfShipownersAgents(soapModel.getNameOfShipownersAgents());
		model.setShipAgencyAddress(soapModel.getShipAgencyAddress());
		model.setShipAgencyPhone(soapModel.getShipAgencyPhone());
		model.setShipAgencyFax(soapModel.getShipAgencyFax());
		model.setShipAgencyEmail(soapModel.getShipAgencyEmail());
		model.setGrossTonnage(soapModel.getGrossTonnage());
		model.setNetTonnage(soapModel.getNetTonnage());
		model.setPositionOfShipInport(soapModel.getPositionOfShipInport());
		model.setBriefParticularsOfVoyage(soapModel.getBriefParticularsOfVoyage());
		model.setPreviousPortsOfCall(soapModel.getPreviousPortsOfCall());
		model.setSubsequentPortsOfCall(soapModel.getSubsequentPortsOfCall());
		model.setDischargedPorts(soapModel.getDischargedPorts());
		model.setRemainingCargo(soapModel.getRemainingCargo());
		model.setBriefDescriptionOfTheCargo(soapModel.getBriefDescriptionOfTheCargo());
		model.setNumberOfCrew(soapModel.getNumberOfCrew());
		model.setNumberOfPassengers(soapModel.getNumberOfPassengers());
		model.setShipRequirementsInTermsOfWaste(soapModel.getShipRequirementsInTermsOfWaste());
		model.setRemarks(soapModel.getRemarks());
		model.setNumberCargoDeclaration(soapModel.getNumberCargoDeclaration());
		model.setNumberShipStoreDeclaration(soapModel.getNumberShipStoreDeclaration());
		model.setNumberCrewList(soapModel.getNumberCrewList());
		model.setNumberPassengerList(soapModel.getNumberPassengerList());
		model.setNumberCrewEffects(soapModel.getNumberCrewEffects());
		model.setNumberHealthMaritime(soapModel.getNumberHealthMaritime());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setMasterSigned(soapModel.getMasterSigned());
		model.setMasterSignedImage(soapModel.getMasterSignedImage());
		model.setCargoOnBoard(soapModel.getCargoOnBoard());
		model.setCargo(soapModel.getCargo());
		model.setVolumeCargo(soapModel.getVolumeCargo());
		model.setCargoUnit(soapModel.getCargoUnit());
		model.setCargoDescription(soapModel.getCargoDescription());
		model.setRatedPower(soapModel.getRatedPower());
		model.setSeatingCapacity(soapModel.getSeatingCapacity());
		model.setLyingCapacity(soapModel.getLyingCapacity());
		model.setMaritimePortCode(soapModel.getMaritimePortCode());
		model.setLastProvinceCode(soapModel.getLastProvinceCode());
		model.setNextProvinceCode(soapModel.getNextProvinceCode());
		model.setLastMaritimePortCode(soapModel.getLastMaritimePortCode());
		model.setLastPortRegionCode(soapModel.getLastPortRegionCode());
		model.setLastPortHarbourCode(soapModel.getLastPortHarbourCode());
		model.setLastPortWharfCode(soapModel.getLastPortWharfCode());
		model.setNextMaritimePortCode(soapModel.getNextMaritimePortCode());
		model.setNextPortRegionCode(soapModel.getNextPortRegionCode());
		model.setNextPortHarbourCode(soapModel.getNextPortHarbourCode());
		model.setNextPortWharfCode(soapModel.getNextPortWharfCode());
		model.setLink(soapModel.getLink());
		model.setQrCode(soapModel.getQrCode());
		model.setPortClearanceNo(soapModel.getPortClearanceNo());
		model.setLoa(soapModel.getLoa());
		model.setUnitLOA(soapModel.getUnitLOA());
		model.setBreadth(soapModel.getBreadth());
		model.setUnitBreadth(soapModel.getUnitBreadth());
		model.setClearanceHeight(soapModel.getClearanceHeight());
		model.setUnitClearanceHeight(soapModel.getUnitClearanceHeight());
		model.setShownDraftxF(soapModel.getShownDraftxF());
		model.setUnitShownDraftxF(soapModel.getUnitShownDraftxF());
		model.setShownDraftxA(soapModel.getShownDraftxA());
		model.setUnitShownDraftxA(soapModel.getUnitShownDraftxA());
		model.setDwt(soapModel.getDwt());
		model.setUnitDWT(soapModel.getUnitDWT());
		model.setTimeOfPORTArrival(soapModel.getTimeOfPORTArrival());
		model.setTimeOfPilotOnBoard(soapModel.getTimeOfPilotOnBoard());
		model.setTugBoat(soapModel.getTugBoat());
		model.setDo_(soapModel.getDo_());
		model.setFo(soapModel.getFo());
		model.setFw(soapModel.getFw());
		model.setPlaceOfReception(soapModel.getPlaceOfReception());
		model.setNameOfShipOwners(soapModel.getNameOfShipOwners());
		model.setAddressOfShipOwners(soapModel.getAddressOfShipOwners());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempGeneralDeclaration> toModels(
		TempGeneralDeclarationSoap[] soapModels) {
		List<TempGeneralDeclaration> models = new ArrayList<TempGeneralDeclaration>(soapModels.length);

		for (TempGeneralDeclarationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration"));

	public TempGeneralDeclarationModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempGeneralDeclaration.class;
	}

	public String getModelClassName() {
		return TempGeneralDeclaration.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public int getRequestState() {
		return _requestState;
	}

	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public long getDocumentReference() {
		return _documentReference;
	}

	public void setDocumentReference(long documentReference) {
		_documentReference = documentReference;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	public int getIsArrival() {
		return _isArrival;
	}

	public void setIsArrival(int isArrival) {
		_isArrival = isArrival;
	}

	@JSON
	public String getNameOfShip() {
		if (_nameOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShip;
		}
	}

	public void setNameOfShip(String nameOfShip) {
		_nameOfShip = nameOfShip;
	}

	@JSON
	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	public void setShipTypeCode(String shipTypeCode) {
		_shipTypeCode = shipTypeCode;
	}

	@JSON
	public String getImoNumber() {
		if (_imoNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _imoNumber;
		}
	}

	public void setImoNumber(String imoNumber) {
		_imoNumber = imoNumber;
	}

	@JSON
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	public String getVoyageNumber() {
		if (_voyageNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _voyageNumber;
		}
	}

	public void setVoyageNumber(String voyageNumber) {
		_voyageNumber = voyageNumber;
	}

	@JSON
	public String getPortOfArrivalCode() {
		if (_portOfArrivalCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portOfArrivalCode;
		}
	}

	public void setPortOfArrivalCode(String portOfArrivalCode) {
		_portOfArrivalCode = portOfArrivalCode;
	}

	@JSON
	public Date getDateOfArrival() {
		return _dateOfArrival;
	}

	public void setDateOfArrival(Date dateOfArrival) {
		_dateOfArrival = dateOfArrival;
	}

	@JSON
	public String getPortHarbourCode() {
		if (_portHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourCode;
		}
	}

	public void setPortHarbourCode(String portHarbourCode) {
		_portHarbourCode = portHarbourCode;
	}

	@JSON
	public String getPortRegionCode() {
		if (_portRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portRegionCode;
		}
	}

	public void setPortRegionCode(String portRegionCode) {
		_portRegionCode = portRegionCode;
	}

	@JSON
	public String getPortWharfCode() {
		if (_portWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portWharfCode;
		}
	}

	public void setPortWharfCode(String portWharfCode) {
		_portWharfCode = portWharfCode;
	}

	@JSON
	public String getFlagStateOfShip() {
		if (_flagStateOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagStateOfShip;
		}
	}

	public void setFlagStateOfShip(String flagStateOfShip) {
		_flagStateOfShip = flagStateOfShip;
	}

	@JSON
	public String getNameOfMaster() {
		if (_nameOfMaster == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfMaster;
		}
	}

	public void setNameOfMaster(String nameOfMaster) {
		_nameOfMaster = nameOfMaster;
	}

	@JSON
	public String getLastPortOfCallCode() {
		if (_lastPortOfCallCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastPortOfCallCode;
		}
	}

	public void setLastPortOfCallCode(String lastPortOfCallCode) {
		_lastPortOfCallCode = lastPortOfCallCode;
	}

	@JSON
	public String getCertificateOfRegistryNumber() {
		if (_certificateOfRegistryNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateOfRegistryNumber;
		}
	}

	public void setCertificateOfRegistryNumber(
		String certificateOfRegistryNumber) {
		_certificateOfRegistryNumber = certificateOfRegistryNumber;
	}

	@JSON
	public Date getCertificateOfRegistryDate() {
		return _certificateOfRegistryDate;
	}

	public void setCertificateOfRegistryDate(Date certificateOfRegistryDate) {
		_certificateOfRegistryDate = certificateOfRegistryDate;
	}

	@JSON
	public String getCertificateOfRegistryPortName() {
		if (_certificateOfRegistryPortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateOfRegistryPortName;
		}
	}

	public void setCertificateOfRegistryPortName(
		String certificateOfRegistryPortName) {
		_certificateOfRegistryPortName = certificateOfRegistryPortName;
	}

	@JSON
	public String getTaxCodeOfShipownersAgents() {
		if (_taxCodeOfShipownersAgents == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxCodeOfShipownersAgents;
		}
	}

	public void setTaxCodeOfShipownersAgents(String taxCodeOfShipownersAgents) {
		_taxCodeOfShipownersAgents = taxCodeOfShipownersAgents;
	}

	@JSON
	public String getNameOfShipownersAgents() {
		if (_nameOfShipownersAgents == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShipownersAgents;
		}
	}

	public void setNameOfShipownersAgents(String nameOfShipownersAgents) {
		_nameOfShipownersAgents = nameOfShipownersAgents;
	}

	@JSON
	public String getShipAgencyAddress() {
		if (_shipAgencyAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyAddress;
		}
	}

	public void setShipAgencyAddress(String shipAgencyAddress) {
		_shipAgencyAddress = shipAgencyAddress;
	}

	@JSON
	public String getShipAgencyPhone() {
		if (_shipAgencyPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyPhone;
		}
	}

	public void setShipAgencyPhone(String shipAgencyPhone) {
		_shipAgencyPhone = shipAgencyPhone;
	}

	@JSON
	public String getShipAgencyFax() {
		if (_shipAgencyFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyFax;
		}
	}

	public void setShipAgencyFax(String shipAgencyFax) {
		_shipAgencyFax = shipAgencyFax;
	}

	@JSON
	public String getShipAgencyEmail() {
		if (_shipAgencyEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyEmail;
		}
	}

	public void setShipAgencyEmail(String shipAgencyEmail) {
		_shipAgencyEmail = shipAgencyEmail;
	}

	@JSON
	public double getGrossTonnage() {
		return _grossTonnage;
	}

	public void setGrossTonnage(double grossTonnage) {
		_grossTonnage = grossTonnage;
	}

	@JSON
	public double getNetTonnage() {
		return _netTonnage;
	}

	public void setNetTonnage(double netTonnage) {
		_netTonnage = netTonnage;
	}

	@JSON
	public String getPositionOfShipInport() {
		if (_positionOfShipInport == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionOfShipInport;
		}
	}

	public void setPositionOfShipInport(String positionOfShipInport) {
		_positionOfShipInport = positionOfShipInport;
	}

	@JSON
	public String getBriefParticularsOfVoyage() {
		if (_briefParticularsOfVoyage == null) {
			return StringPool.BLANK;
		}
		else {
			return _briefParticularsOfVoyage;
		}
	}

	public void setBriefParticularsOfVoyage(String briefParticularsOfVoyage) {
		_briefParticularsOfVoyage = briefParticularsOfVoyage;
	}

	@JSON
	public String getPreviousPortsOfCall() {
		if (_previousPortsOfCall == null) {
			return StringPool.BLANK;
		}
		else {
			return _previousPortsOfCall;
		}
	}

	public void setPreviousPortsOfCall(String previousPortsOfCall) {
		_previousPortsOfCall = previousPortsOfCall;
	}

	@JSON
	public String getSubsequentPortsOfCall() {
		if (_subsequentPortsOfCall == null) {
			return StringPool.BLANK;
		}
		else {
			return _subsequentPortsOfCall;
		}
	}

	public void setSubsequentPortsOfCall(String subsequentPortsOfCall) {
		_subsequentPortsOfCall = subsequentPortsOfCall;
	}

	@JSON
	public String getDischargedPorts() {
		if (_dischargedPorts == null) {
			return StringPool.BLANK;
		}
		else {
			return _dischargedPorts;
		}
	}

	public void setDischargedPorts(String dischargedPorts) {
		_dischargedPorts = dischargedPorts;
	}

	@JSON
	public String getRemainingCargo() {
		if (_remainingCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _remainingCargo;
		}
	}

	public void setRemainingCargo(String remainingCargo) {
		_remainingCargo = remainingCargo;
	}

	@JSON
	public String getBriefDescriptionOfTheCargo() {
		if (_briefDescriptionOfTheCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _briefDescriptionOfTheCargo;
		}
	}

	public void setBriefDescriptionOfTheCargo(String briefDescriptionOfTheCargo) {
		_briefDescriptionOfTheCargo = briefDescriptionOfTheCargo;
	}

	@JSON
	public int getNumberOfCrew() {
		return _numberOfCrew;
	}

	public void setNumberOfCrew(int numberOfCrew) {
		_numberOfCrew = numberOfCrew;
	}

	@JSON
	public int getNumberOfPassengers() {
		return _numberOfPassengers;
	}

	public void setNumberOfPassengers(int numberOfPassengers) {
		_numberOfPassengers = numberOfPassengers;
	}

	@JSON
	public String getShipRequirementsInTermsOfWaste() {
		if (_shipRequirementsInTermsOfWaste == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipRequirementsInTermsOfWaste;
		}
	}

	public void setShipRequirementsInTermsOfWaste(
		String shipRequirementsInTermsOfWaste) {
		_shipRequirementsInTermsOfWaste = shipRequirementsInTermsOfWaste;
	}

	@JSON
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	public String getNumberCargoDeclaration() {
		if (_numberCargoDeclaration == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberCargoDeclaration;
		}
	}

	public void setNumberCargoDeclaration(String numberCargoDeclaration) {
		_numberCargoDeclaration = numberCargoDeclaration;
	}

	@JSON
	public String getNumberShipStoreDeclaration() {
		if (_numberShipStoreDeclaration == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberShipStoreDeclaration;
		}
	}

	public void setNumberShipStoreDeclaration(String numberShipStoreDeclaration) {
		_numberShipStoreDeclaration = numberShipStoreDeclaration;
	}

	@JSON
	public String getNumberCrewList() {
		if (_numberCrewList == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberCrewList;
		}
	}

	public void setNumberCrewList(String numberCrewList) {
		_numberCrewList = numberCrewList;
	}

	@JSON
	public String getNumberPassengerList() {
		if (_numberPassengerList == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberPassengerList;
		}
	}

	public void setNumberPassengerList(String numberPassengerList) {
		_numberPassengerList = numberPassengerList;
	}

	@JSON
	public String getNumberCrewEffects() {
		if (_numberCrewEffects == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberCrewEffects;
		}
	}

	public void setNumberCrewEffects(String numberCrewEffects) {
		_numberCrewEffects = numberCrewEffects;
	}

	@JSON
	public String getNumberHealthMaritime() {
		if (_numberHealthMaritime == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberHealthMaritime;
		}
	}

	public void setNumberHealthMaritime(String numberHealthMaritime) {
		_numberHealthMaritime = numberHealthMaritime;
	}

	@JSON
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	public Date getSignDate() {
		return _signDate;
	}

	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	public int getMasterSigned() {
		return _masterSigned;
	}

	public void setMasterSigned(int masterSigned) {
		_masterSigned = masterSigned;
	}

	@JSON
	public int getMasterSignedImage() {
		return _masterSignedImage;
	}

	public void setMasterSignedImage(int masterSignedImage) {
		_masterSignedImage = masterSignedImage;
	}

	@JSON
	public String getCargoOnBoard() {
		if (_CargoOnBoard == null) {
			return StringPool.BLANK;
		}
		else {
			return _CargoOnBoard;
		}
	}

	public void setCargoOnBoard(String CargoOnBoard) {
		_CargoOnBoard = CargoOnBoard;
	}

	@JSON
	public String getCargo() {
		if (_Cargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _Cargo;
		}
	}

	public void setCargo(String Cargo) {
		_Cargo = Cargo;
	}

	@JSON
	public double getVolumeCargo() {
		return _VolumeCargo;
	}

	public void setVolumeCargo(double VolumeCargo) {
		_VolumeCargo = VolumeCargo;
	}

	@JSON
	public String getCargoUnit() {
		if (_CargoUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _CargoUnit;
		}
	}

	public void setCargoUnit(String CargoUnit) {
		_CargoUnit = CargoUnit;
	}

	@JSON
	public String getCargoDescription() {
		if (_CargoDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _CargoDescription;
		}
	}

	public void setCargoDescription(String CargoDescription) {
		_CargoDescription = CargoDescription;
	}

	@JSON
	public String getRatedPower() {
		if (_ratedPower == null) {
			return StringPool.BLANK;
		}
		else {
			return _ratedPower;
		}
	}

	public void setRatedPower(String ratedPower) {
		_ratedPower = ratedPower;
	}

	@JSON
	public String getSeatingCapacity() {
		if (_seatingCapacity == null) {
			return StringPool.BLANK;
		}
		else {
			return _seatingCapacity;
		}
	}

	public void setSeatingCapacity(String seatingCapacity) {
		_seatingCapacity = seatingCapacity;
	}

	@JSON
	public String getLyingCapacity() {
		if (_lyingCapacity == null) {
			return StringPool.BLANK;
		}
		else {
			return _lyingCapacity;
		}
	}

	public void setLyingCapacity(String lyingCapacity) {
		_lyingCapacity = lyingCapacity;
	}

	@JSON
	public String getMaritimePortCode() {
		if (_maritimePortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _maritimePortCode;
		}
	}

	public void setMaritimePortCode(String maritimePortCode) {
		_maritimePortCode = maritimePortCode;
	}

	@JSON
	public String getLastProvinceCode() {
		if (_lastProvinceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastProvinceCode;
		}
	}

	public void setLastProvinceCode(String lastProvinceCode) {
		_lastProvinceCode = lastProvinceCode;
	}

	@JSON
	public String getNextProvinceCode() {
		if (_nextProvinceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextProvinceCode;
		}
	}

	public void setNextProvinceCode(String nextProvinceCode) {
		_nextProvinceCode = nextProvinceCode;
	}

	@JSON
	public String getLastMaritimePortCode() {
		if (_lastMaritimePortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastMaritimePortCode;
		}
	}

	public void setLastMaritimePortCode(String lastMaritimePortCode) {
		_lastMaritimePortCode = lastMaritimePortCode;
	}

	@JSON
	public String getLastPortRegionCode() {
		if (_lastPortRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastPortRegionCode;
		}
	}

	public void setLastPortRegionCode(String lastPortRegionCode) {
		_lastPortRegionCode = lastPortRegionCode;
	}

	@JSON
	public String getLastPortHarbourCode() {
		if (_lastPortHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastPortHarbourCode;
		}
	}

	public void setLastPortHarbourCode(String lastPortHarbourCode) {
		_lastPortHarbourCode = lastPortHarbourCode;
	}

	@JSON
	public String getLastPortWharfCode() {
		if (_lastPortWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastPortWharfCode;
		}
	}

	public void setLastPortWharfCode(String lastPortWharfCode) {
		_lastPortWharfCode = lastPortWharfCode;
	}

	@JSON
	public String getNextMaritimePortCode() {
		if (_nextMaritimePortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextMaritimePortCode;
		}
	}

	public void setNextMaritimePortCode(String nextMaritimePortCode) {
		_nextMaritimePortCode = nextMaritimePortCode;
	}

	@JSON
	public String getNextPortRegionCode() {
		if (_nextPortRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextPortRegionCode;
		}
	}

	public void setNextPortRegionCode(String nextPortRegionCode) {
		_nextPortRegionCode = nextPortRegionCode;
	}

	@JSON
	public String getNextPortHarbourCode() {
		if (_nextPortHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextPortHarbourCode;
		}
	}

	public void setNextPortHarbourCode(String nextPortHarbourCode) {
		_nextPortHarbourCode = nextPortHarbourCode;
	}

	@JSON
	public String getNextPortWharfCode() {
		if (_nextPortWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextPortWharfCode;
		}
	}

	public void setNextPortWharfCode(String nextPortWharfCode) {
		_nextPortWharfCode = nextPortWharfCode;
	}

	@JSON
	public String getLink() {
		if (_link == null) {
			return StringPool.BLANK;
		}
		else {
			return _link;
		}
	}

	public void setLink(String link) {
		_link = link;
	}

	@JSON
	public String getQrCode() {
		if (_qrCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _qrCode;
		}
	}

	public void setQrCode(String qrCode) {
		_qrCode = qrCode;
	}

	@JSON
	public String getPortClearanceNo() {
		if (_portClearanceNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _portClearanceNo;
		}
	}

	public void setPortClearanceNo(String portClearanceNo) {
		_portClearanceNo = portClearanceNo;
	}

	@JSON
	public double getLoa() {
		return _loa;
	}

	public void setLoa(double loa) {
		_loa = loa;
	}

	@JSON
	public String getUnitLOA() {
		if (_unitLOA == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitLOA;
		}
	}

	public void setUnitLOA(String unitLOA) {
		_unitLOA = unitLOA;
	}

	@JSON
	public double getBreadth() {
		return _breadth;
	}

	public void setBreadth(double breadth) {
		_breadth = breadth;
	}

	@JSON
	public String getUnitBreadth() {
		if (_unitBreadth == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitBreadth;
		}
	}

	public void setUnitBreadth(String unitBreadth) {
		_unitBreadth = unitBreadth;
	}

	@JSON
	public double getClearanceHeight() {
		return _clearanceHeight;
	}

	public void setClearanceHeight(double clearanceHeight) {
		_clearanceHeight = clearanceHeight;
	}

	@JSON
	public String getUnitClearanceHeight() {
		if (_unitClearanceHeight == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitClearanceHeight;
		}
	}

	public void setUnitClearanceHeight(String unitClearanceHeight) {
		_unitClearanceHeight = unitClearanceHeight;
	}

	@JSON
	public double getShownDraftxF() {
		return _shownDraftxF;
	}

	public void setShownDraftxF(double shownDraftxF) {
		_shownDraftxF = shownDraftxF;
	}

	@JSON
	public String getUnitShownDraftxF() {
		if (_unitShownDraftxF == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxF;
		}
	}

	public void setUnitShownDraftxF(String unitShownDraftxF) {
		_unitShownDraftxF = unitShownDraftxF;
	}

	@JSON
	public double getShownDraftxA() {
		return _shownDraftxA;
	}

	public void setShownDraftxA(double shownDraftxA) {
		_shownDraftxA = shownDraftxA;
	}

	@JSON
	public String getUnitShownDraftxA() {
		if (_unitShownDraftxA == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitShownDraftxA;
		}
	}

	public void setUnitShownDraftxA(String unitShownDraftxA) {
		_unitShownDraftxA = unitShownDraftxA;
	}

	@JSON
	public double getDwt() {
		return _dwt;
	}

	public void setDwt(double dwt) {
		_dwt = dwt;
	}

	@JSON
	public String getUnitDWT() {
		if (_unitDWT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitDWT;
		}
	}

	public void setUnitDWT(String unitDWT) {
		_unitDWT = unitDWT;
	}

	@JSON
	public Date getTimeOfPORTArrival() {
		return _timeOfPORTArrival;
	}

	public void setTimeOfPORTArrival(Date timeOfPORTArrival) {
		_timeOfPORTArrival = timeOfPORTArrival;
	}

	@JSON
	public Date getTimeOfPilotOnBoard() {
		return _timeOfPilotOnBoard;
	}

	public void setTimeOfPilotOnBoard(Date timeOfPilotOnBoard) {
		_timeOfPilotOnBoard = timeOfPilotOnBoard;
	}

	@JSON
	public String getTugBoat() {
		if (_tugBoat == null) {
			return StringPool.BLANK;
		}
		else {
			return _tugBoat;
		}
	}

	public void setTugBoat(String tugBoat) {
		_tugBoat = tugBoat;
	}

	@JSON
	public String getDo_() {
		if (_do_ == null) {
			return StringPool.BLANK;
		}
		else {
			return _do_;
		}
	}

	public void setDo_(String do_) {
		_do_ = do_;
	}

	@JSON
	public String getFo() {
		if (_fo == null) {
			return StringPool.BLANK;
		}
		else {
			return _fo;
		}
	}

	public void setFo(String fo) {
		_fo = fo;
	}

	@JSON
	public String getFw() {
		if (_fw == null) {
			return StringPool.BLANK;
		}
		else {
			return _fw;
		}
	}

	public void setFw(String fw) {
		_fw = fw;
	}

	@JSON
	public String getPlaceOfReception() {
		if (_placeOfReception == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeOfReception;
		}
	}

	public void setPlaceOfReception(String placeOfReception) {
		_placeOfReception = placeOfReception;
	}

	@JSON
	public String getNameOfShipOwners() {
		if (_nameOfShipOwners == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShipOwners;
		}
	}

	public void setNameOfShipOwners(String nameOfShipOwners) {
		_nameOfShipOwners = nameOfShipOwners;
	}

	@JSON
	public String getAddressOfShipOwners() {
		if (_addressOfShipOwners == null) {
			return StringPool.BLANK;
		}
		else {
			return _addressOfShipOwners;
		}
	}

	public void setAddressOfShipOwners(String addressOfShipOwners) {
		_addressOfShipOwners = addressOfShipOwners;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempGeneralDeclaration toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempGeneralDeclaration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempGeneralDeclaration.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempGeneralDeclarationImpl tempGeneralDeclarationImpl = new TempGeneralDeclarationImpl();

		tempGeneralDeclarationImpl.setId(getId());
		tempGeneralDeclarationImpl.setRequestCode(getRequestCode());
		tempGeneralDeclarationImpl.setRequestState(getRequestState());
		tempGeneralDeclarationImpl.setDocumentName(getDocumentName());
		tempGeneralDeclarationImpl.setDocumentReference(getDocumentReference());
		tempGeneralDeclarationImpl.setDocumentYear(getDocumentYear());
		tempGeneralDeclarationImpl.setUserCreated(getUserCreated());
		tempGeneralDeclarationImpl.setIsArrival(getIsArrival());
		tempGeneralDeclarationImpl.setNameOfShip(getNameOfShip());
		tempGeneralDeclarationImpl.setShipTypeCode(getShipTypeCode());
		tempGeneralDeclarationImpl.setImoNumber(getImoNumber());
		tempGeneralDeclarationImpl.setCallSign(getCallSign());
		tempGeneralDeclarationImpl.setVoyageNumber(getVoyageNumber());
		tempGeneralDeclarationImpl.setPortOfArrivalCode(getPortOfArrivalCode());
		tempGeneralDeclarationImpl.setDateOfArrival(getDateOfArrival());
		tempGeneralDeclarationImpl.setPortHarbourCode(getPortHarbourCode());
		tempGeneralDeclarationImpl.setPortRegionCode(getPortRegionCode());
		tempGeneralDeclarationImpl.setPortWharfCode(getPortWharfCode());
		tempGeneralDeclarationImpl.setFlagStateOfShip(getFlagStateOfShip());
		tempGeneralDeclarationImpl.setNameOfMaster(getNameOfMaster());
		tempGeneralDeclarationImpl.setLastPortOfCallCode(getLastPortOfCallCode());
		tempGeneralDeclarationImpl.setCertificateOfRegistryNumber(getCertificateOfRegistryNumber());
		tempGeneralDeclarationImpl.setCertificateOfRegistryDate(getCertificateOfRegistryDate());
		tempGeneralDeclarationImpl.setCertificateOfRegistryPortName(getCertificateOfRegistryPortName());
		tempGeneralDeclarationImpl.setTaxCodeOfShipownersAgents(getTaxCodeOfShipownersAgents());
		tempGeneralDeclarationImpl.setNameOfShipownersAgents(getNameOfShipownersAgents());
		tempGeneralDeclarationImpl.setShipAgencyAddress(getShipAgencyAddress());
		tempGeneralDeclarationImpl.setShipAgencyPhone(getShipAgencyPhone());
		tempGeneralDeclarationImpl.setShipAgencyFax(getShipAgencyFax());
		tempGeneralDeclarationImpl.setShipAgencyEmail(getShipAgencyEmail());
		tempGeneralDeclarationImpl.setGrossTonnage(getGrossTonnage());
		tempGeneralDeclarationImpl.setNetTonnage(getNetTonnage());
		tempGeneralDeclarationImpl.setPositionOfShipInport(getPositionOfShipInport());
		tempGeneralDeclarationImpl.setBriefParticularsOfVoyage(getBriefParticularsOfVoyage());
		tempGeneralDeclarationImpl.setPreviousPortsOfCall(getPreviousPortsOfCall());
		tempGeneralDeclarationImpl.setSubsequentPortsOfCall(getSubsequentPortsOfCall());
		tempGeneralDeclarationImpl.setDischargedPorts(getDischargedPorts());
		tempGeneralDeclarationImpl.setRemainingCargo(getRemainingCargo());
		tempGeneralDeclarationImpl.setBriefDescriptionOfTheCargo(getBriefDescriptionOfTheCargo());
		tempGeneralDeclarationImpl.setNumberOfCrew(getNumberOfCrew());
		tempGeneralDeclarationImpl.setNumberOfPassengers(getNumberOfPassengers());
		tempGeneralDeclarationImpl.setShipRequirementsInTermsOfWaste(getShipRequirementsInTermsOfWaste());
		tempGeneralDeclarationImpl.setRemarks(getRemarks());
		tempGeneralDeclarationImpl.setNumberCargoDeclaration(getNumberCargoDeclaration());
		tempGeneralDeclarationImpl.setNumberShipStoreDeclaration(getNumberShipStoreDeclaration());
		tempGeneralDeclarationImpl.setNumberCrewList(getNumberCrewList());
		tempGeneralDeclarationImpl.setNumberPassengerList(getNumberPassengerList());
		tempGeneralDeclarationImpl.setNumberCrewEffects(getNumberCrewEffects());
		tempGeneralDeclarationImpl.setNumberHealthMaritime(getNumberHealthMaritime());
		tempGeneralDeclarationImpl.setSignPlace(getSignPlace());
		tempGeneralDeclarationImpl.setSignDate(getSignDate());
		tempGeneralDeclarationImpl.setMasterSigned(getMasterSigned());
		tempGeneralDeclarationImpl.setMasterSignedImage(getMasterSignedImage());
		tempGeneralDeclarationImpl.setCargoOnBoard(getCargoOnBoard());
		tempGeneralDeclarationImpl.setCargo(getCargo());
		tempGeneralDeclarationImpl.setVolumeCargo(getVolumeCargo());
		tempGeneralDeclarationImpl.setCargoUnit(getCargoUnit());
		tempGeneralDeclarationImpl.setCargoDescription(getCargoDescription());
		tempGeneralDeclarationImpl.setRatedPower(getRatedPower());
		tempGeneralDeclarationImpl.setSeatingCapacity(getSeatingCapacity());
		tempGeneralDeclarationImpl.setLyingCapacity(getLyingCapacity());
		tempGeneralDeclarationImpl.setMaritimePortCode(getMaritimePortCode());
		tempGeneralDeclarationImpl.setLastProvinceCode(getLastProvinceCode());
		tempGeneralDeclarationImpl.setNextProvinceCode(getNextProvinceCode());
		tempGeneralDeclarationImpl.setLastMaritimePortCode(getLastMaritimePortCode());
		tempGeneralDeclarationImpl.setLastPortRegionCode(getLastPortRegionCode());
		tempGeneralDeclarationImpl.setLastPortHarbourCode(getLastPortHarbourCode());
		tempGeneralDeclarationImpl.setLastPortWharfCode(getLastPortWharfCode());
		tempGeneralDeclarationImpl.setNextMaritimePortCode(getNextMaritimePortCode());
		tempGeneralDeclarationImpl.setNextPortRegionCode(getNextPortRegionCode());
		tempGeneralDeclarationImpl.setNextPortHarbourCode(getNextPortHarbourCode());
		tempGeneralDeclarationImpl.setNextPortWharfCode(getNextPortWharfCode());
		tempGeneralDeclarationImpl.setLink(getLink());
		tempGeneralDeclarationImpl.setQrCode(getQrCode());
		tempGeneralDeclarationImpl.setPortClearanceNo(getPortClearanceNo());
		tempGeneralDeclarationImpl.setLoa(getLoa());
		tempGeneralDeclarationImpl.setUnitLOA(getUnitLOA());
		tempGeneralDeclarationImpl.setBreadth(getBreadth());
		tempGeneralDeclarationImpl.setUnitBreadth(getUnitBreadth());
		tempGeneralDeclarationImpl.setClearanceHeight(getClearanceHeight());
		tempGeneralDeclarationImpl.setUnitClearanceHeight(getUnitClearanceHeight());
		tempGeneralDeclarationImpl.setShownDraftxF(getShownDraftxF());
		tempGeneralDeclarationImpl.setUnitShownDraftxF(getUnitShownDraftxF());
		tempGeneralDeclarationImpl.setShownDraftxA(getShownDraftxA());
		tempGeneralDeclarationImpl.setUnitShownDraftxA(getUnitShownDraftxA());
		tempGeneralDeclarationImpl.setDwt(getDwt());
		tempGeneralDeclarationImpl.setUnitDWT(getUnitDWT());
		tempGeneralDeclarationImpl.setTimeOfPORTArrival(getTimeOfPORTArrival());
		tempGeneralDeclarationImpl.setTimeOfPilotOnBoard(getTimeOfPilotOnBoard());
		tempGeneralDeclarationImpl.setTugBoat(getTugBoat());
		tempGeneralDeclarationImpl.setDo_(getDo_());
		tempGeneralDeclarationImpl.setFo(getFo());
		tempGeneralDeclarationImpl.setFw(getFw());
		tempGeneralDeclarationImpl.setPlaceOfReception(getPlaceOfReception());
		tempGeneralDeclarationImpl.setNameOfShipOwners(getNameOfShipOwners());
		tempGeneralDeclarationImpl.setAddressOfShipOwners(getAddressOfShipOwners());

		tempGeneralDeclarationImpl.resetOriginalValues();

		return tempGeneralDeclarationImpl;
	}

	public int compareTo(TempGeneralDeclaration tempGeneralDeclaration) {
		int value = 0;

		if (getId() < tempGeneralDeclaration.getId()) {
			value = -1;
		}
		else if (getId() > tempGeneralDeclaration.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempGeneralDeclaration tempGeneralDeclaration = null;

		try {
			tempGeneralDeclaration = (TempGeneralDeclaration)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempGeneralDeclaration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempGeneralDeclarationModelImpl tempGeneralDeclarationModelImpl = this;

		tempGeneralDeclarationModelImpl._originalRequestCode = tempGeneralDeclarationModelImpl._requestCode;

		tempGeneralDeclarationModelImpl._originalRequestState = tempGeneralDeclarationModelImpl._requestState;

		tempGeneralDeclarationModelImpl._setOriginalRequestState = false;

		tempGeneralDeclarationModelImpl._originalDocumentName = tempGeneralDeclarationModelImpl._documentName;

		tempGeneralDeclarationModelImpl._setOriginalDocumentName = false;

		tempGeneralDeclarationModelImpl._originalDocumentYear = tempGeneralDeclarationModelImpl._documentYear;

		tempGeneralDeclarationModelImpl._setOriginalDocumentYear = false;

		tempGeneralDeclarationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempGeneralDeclaration> toCacheModel() {
		TempGeneralDeclarationCacheModel tempGeneralDeclarationCacheModel = new TempGeneralDeclarationCacheModel();

		tempGeneralDeclarationCacheModel.id = getId();

		tempGeneralDeclarationCacheModel.requestCode = getRequestCode();

		String requestCode = tempGeneralDeclarationCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.requestCode = null;
		}

		tempGeneralDeclarationCacheModel.requestState = getRequestState();

		tempGeneralDeclarationCacheModel.documentName = getDocumentName();

		tempGeneralDeclarationCacheModel.documentReference = getDocumentReference();

		tempGeneralDeclarationCacheModel.documentYear = getDocumentYear();

		tempGeneralDeclarationCacheModel.userCreated = getUserCreated();

		String userCreated = tempGeneralDeclarationCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			tempGeneralDeclarationCacheModel.userCreated = null;
		}

		tempGeneralDeclarationCacheModel.isArrival = getIsArrival();

		tempGeneralDeclarationCacheModel.nameOfShip = getNameOfShip();

		String nameOfShip = tempGeneralDeclarationCacheModel.nameOfShip;

		if ((nameOfShip != null) && (nameOfShip.length() == 0)) {
			tempGeneralDeclarationCacheModel.nameOfShip = null;
		}

		tempGeneralDeclarationCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = tempGeneralDeclarationCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipTypeCode = null;
		}

		tempGeneralDeclarationCacheModel.imoNumber = getImoNumber();

		String imoNumber = tempGeneralDeclarationCacheModel.imoNumber;

		if ((imoNumber != null) && (imoNumber.length() == 0)) {
			tempGeneralDeclarationCacheModel.imoNumber = null;
		}

		tempGeneralDeclarationCacheModel.callSign = getCallSign();

		String callSign = tempGeneralDeclarationCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			tempGeneralDeclarationCacheModel.callSign = null;
		}

		tempGeneralDeclarationCacheModel.voyageNumber = getVoyageNumber();

		String voyageNumber = tempGeneralDeclarationCacheModel.voyageNumber;

		if ((voyageNumber != null) && (voyageNumber.length() == 0)) {
			tempGeneralDeclarationCacheModel.voyageNumber = null;
		}

		tempGeneralDeclarationCacheModel.portOfArrivalCode = getPortOfArrivalCode();

		String portOfArrivalCode = tempGeneralDeclarationCacheModel.portOfArrivalCode;

		if ((portOfArrivalCode != null) && (portOfArrivalCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portOfArrivalCode = null;
		}

		Date dateOfArrival = getDateOfArrival();

		if (dateOfArrival != null) {
			tempGeneralDeclarationCacheModel.dateOfArrival = dateOfArrival.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.dateOfArrival = Long.MIN_VALUE;
		}

		tempGeneralDeclarationCacheModel.portHarbourCode = getPortHarbourCode();

		String portHarbourCode = tempGeneralDeclarationCacheModel.portHarbourCode;

		if ((portHarbourCode != null) && (portHarbourCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portHarbourCode = null;
		}

		tempGeneralDeclarationCacheModel.portRegionCode = getPortRegionCode();

		String portRegionCode = tempGeneralDeclarationCacheModel.portRegionCode;

		if ((portRegionCode != null) && (portRegionCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portRegionCode = null;
		}

		tempGeneralDeclarationCacheModel.portWharfCode = getPortWharfCode();

		String portWharfCode = tempGeneralDeclarationCacheModel.portWharfCode;

		if ((portWharfCode != null) && (portWharfCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portWharfCode = null;
		}

		tempGeneralDeclarationCacheModel.flagStateOfShip = getFlagStateOfShip();

		String flagStateOfShip = tempGeneralDeclarationCacheModel.flagStateOfShip;

		if ((flagStateOfShip != null) && (flagStateOfShip.length() == 0)) {
			tempGeneralDeclarationCacheModel.flagStateOfShip = null;
		}

		tempGeneralDeclarationCacheModel.nameOfMaster = getNameOfMaster();

		String nameOfMaster = tempGeneralDeclarationCacheModel.nameOfMaster;

		if ((nameOfMaster != null) && (nameOfMaster.length() == 0)) {
			tempGeneralDeclarationCacheModel.nameOfMaster = null;
		}

		tempGeneralDeclarationCacheModel.lastPortOfCallCode = getLastPortOfCallCode();

		String lastPortOfCallCode = tempGeneralDeclarationCacheModel.lastPortOfCallCode;

		if ((lastPortOfCallCode != null) && (lastPortOfCallCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.lastPortOfCallCode = null;
		}

		tempGeneralDeclarationCacheModel.certificateOfRegistryNumber = getCertificateOfRegistryNumber();

		String certificateOfRegistryNumber = tempGeneralDeclarationCacheModel.certificateOfRegistryNumber;

		if ((certificateOfRegistryNumber != null) &&
				(certificateOfRegistryNumber.length() == 0)) {
			tempGeneralDeclarationCacheModel.certificateOfRegistryNumber = null;
		}

		Date certificateOfRegistryDate = getCertificateOfRegistryDate();

		if (certificateOfRegistryDate != null) {
			tempGeneralDeclarationCacheModel.certificateOfRegistryDate = certificateOfRegistryDate.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.certificateOfRegistryDate = Long.MIN_VALUE;
		}

		tempGeneralDeclarationCacheModel.certificateOfRegistryPortName = getCertificateOfRegistryPortName();

		String certificateOfRegistryPortName = tempGeneralDeclarationCacheModel.certificateOfRegistryPortName;

		if ((certificateOfRegistryPortName != null) &&
				(certificateOfRegistryPortName.length() == 0)) {
			tempGeneralDeclarationCacheModel.certificateOfRegistryPortName = null;
		}

		tempGeneralDeclarationCacheModel.taxCodeOfShipownersAgents = getTaxCodeOfShipownersAgents();

		String taxCodeOfShipownersAgents = tempGeneralDeclarationCacheModel.taxCodeOfShipownersAgents;

		if ((taxCodeOfShipownersAgents != null) &&
				(taxCodeOfShipownersAgents.length() == 0)) {
			tempGeneralDeclarationCacheModel.taxCodeOfShipownersAgents = null;
		}

		tempGeneralDeclarationCacheModel.nameOfShipownersAgents = getNameOfShipownersAgents();

		String nameOfShipownersAgents = tempGeneralDeclarationCacheModel.nameOfShipownersAgents;

		if ((nameOfShipownersAgents != null) &&
				(nameOfShipownersAgents.length() == 0)) {
			tempGeneralDeclarationCacheModel.nameOfShipownersAgents = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyAddress = getShipAgencyAddress();

		String shipAgencyAddress = tempGeneralDeclarationCacheModel.shipAgencyAddress;

		if ((shipAgencyAddress != null) && (shipAgencyAddress.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyAddress = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyPhone = getShipAgencyPhone();

		String shipAgencyPhone = tempGeneralDeclarationCacheModel.shipAgencyPhone;

		if ((shipAgencyPhone != null) && (shipAgencyPhone.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyPhone = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyFax = getShipAgencyFax();

		String shipAgencyFax = tempGeneralDeclarationCacheModel.shipAgencyFax;

		if ((shipAgencyFax != null) && (shipAgencyFax.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyFax = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyEmail = getShipAgencyEmail();

		String shipAgencyEmail = tempGeneralDeclarationCacheModel.shipAgencyEmail;

		if ((shipAgencyEmail != null) && (shipAgencyEmail.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyEmail = null;
		}

		tempGeneralDeclarationCacheModel.grossTonnage = getGrossTonnage();

		tempGeneralDeclarationCacheModel.netTonnage = getNetTonnage();

		tempGeneralDeclarationCacheModel.positionOfShipInport = getPositionOfShipInport();

		String positionOfShipInport = tempGeneralDeclarationCacheModel.positionOfShipInport;

		if ((positionOfShipInport != null) &&
				(positionOfShipInport.length() == 0)) {
			tempGeneralDeclarationCacheModel.positionOfShipInport = null;
		}

		tempGeneralDeclarationCacheModel.briefParticularsOfVoyage = getBriefParticularsOfVoyage();

		String briefParticularsOfVoyage = tempGeneralDeclarationCacheModel.briefParticularsOfVoyage;

		if ((briefParticularsOfVoyage != null) &&
				(briefParticularsOfVoyage.length() == 0)) {
			tempGeneralDeclarationCacheModel.briefParticularsOfVoyage = null;
		}

		tempGeneralDeclarationCacheModel.previousPortsOfCall = getPreviousPortsOfCall();

		String previousPortsOfCall = tempGeneralDeclarationCacheModel.previousPortsOfCall;

		if ((previousPortsOfCall != null) &&
				(previousPortsOfCall.length() == 0)) {
			tempGeneralDeclarationCacheModel.previousPortsOfCall = null;
		}

		tempGeneralDeclarationCacheModel.subsequentPortsOfCall = getSubsequentPortsOfCall();

		String subsequentPortsOfCall = tempGeneralDeclarationCacheModel.subsequentPortsOfCall;

		if ((subsequentPortsOfCall != null) &&
				(subsequentPortsOfCall.length() == 0)) {
			tempGeneralDeclarationCacheModel.subsequentPortsOfCall = null;
		}

		tempGeneralDeclarationCacheModel.dischargedPorts = getDischargedPorts();

		String dischargedPorts = tempGeneralDeclarationCacheModel.dischargedPorts;

		if ((dischargedPorts != null) && (dischargedPorts.length() == 0)) {
			tempGeneralDeclarationCacheModel.dischargedPorts = null;
		}

		tempGeneralDeclarationCacheModel.remainingCargo = getRemainingCargo();

		String remainingCargo = tempGeneralDeclarationCacheModel.remainingCargo;

		if ((remainingCargo != null) && (remainingCargo.length() == 0)) {
			tempGeneralDeclarationCacheModel.remainingCargo = null;
		}

		tempGeneralDeclarationCacheModel.briefDescriptionOfTheCargo = getBriefDescriptionOfTheCargo();

		String briefDescriptionOfTheCargo = tempGeneralDeclarationCacheModel.briefDescriptionOfTheCargo;

		if ((briefDescriptionOfTheCargo != null) &&
				(briefDescriptionOfTheCargo.length() == 0)) {
			tempGeneralDeclarationCacheModel.briefDescriptionOfTheCargo = null;
		}

		tempGeneralDeclarationCacheModel.numberOfCrew = getNumberOfCrew();

		tempGeneralDeclarationCacheModel.numberOfPassengers = getNumberOfPassengers();

		tempGeneralDeclarationCacheModel.shipRequirementsInTermsOfWaste = getShipRequirementsInTermsOfWaste();

		String shipRequirementsInTermsOfWaste = tempGeneralDeclarationCacheModel.shipRequirementsInTermsOfWaste;

		if ((shipRequirementsInTermsOfWaste != null) &&
				(shipRequirementsInTermsOfWaste.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipRequirementsInTermsOfWaste = null;
		}

		tempGeneralDeclarationCacheModel.remarks = getRemarks();

		String remarks = tempGeneralDeclarationCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			tempGeneralDeclarationCacheModel.remarks = null;
		}

		tempGeneralDeclarationCacheModel.numberCargoDeclaration = getNumberCargoDeclaration();

		String numberCargoDeclaration = tempGeneralDeclarationCacheModel.numberCargoDeclaration;

		if ((numberCargoDeclaration != null) &&
				(numberCargoDeclaration.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberCargoDeclaration = null;
		}

		tempGeneralDeclarationCacheModel.numberShipStoreDeclaration = getNumberShipStoreDeclaration();

		String numberShipStoreDeclaration = tempGeneralDeclarationCacheModel.numberShipStoreDeclaration;

		if ((numberShipStoreDeclaration != null) &&
				(numberShipStoreDeclaration.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberShipStoreDeclaration = null;
		}

		tempGeneralDeclarationCacheModel.numberCrewList = getNumberCrewList();

		String numberCrewList = tempGeneralDeclarationCacheModel.numberCrewList;

		if ((numberCrewList != null) && (numberCrewList.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberCrewList = null;
		}

		tempGeneralDeclarationCacheModel.numberPassengerList = getNumberPassengerList();

		String numberPassengerList = tempGeneralDeclarationCacheModel.numberPassengerList;

		if ((numberPassengerList != null) &&
				(numberPassengerList.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberPassengerList = null;
		}

		tempGeneralDeclarationCacheModel.numberCrewEffects = getNumberCrewEffects();

		String numberCrewEffects = tempGeneralDeclarationCacheModel.numberCrewEffects;

		if ((numberCrewEffects != null) && (numberCrewEffects.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberCrewEffects = null;
		}

		tempGeneralDeclarationCacheModel.numberHealthMaritime = getNumberHealthMaritime();

		String numberHealthMaritime = tempGeneralDeclarationCacheModel.numberHealthMaritime;

		if ((numberHealthMaritime != null) &&
				(numberHealthMaritime.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberHealthMaritime = null;
		}

		tempGeneralDeclarationCacheModel.signPlace = getSignPlace();

		String signPlace = tempGeneralDeclarationCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			tempGeneralDeclarationCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			tempGeneralDeclarationCacheModel.signDate = signDate.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.signDate = Long.MIN_VALUE;
		}

		tempGeneralDeclarationCacheModel.masterSigned = getMasterSigned();

		tempGeneralDeclarationCacheModel.masterSignedImage = getMasterSignedImage();

		tempGeneralDeclarationCacheModel.CargoOnBoard = getCargoOnBoard();

		String CargoOnBoard = tempGeneralDeclarationCacheModel.CargoOnBoard;

		if ((CargoOnBoard != null) && (CargoOnBoard.length() == 0)) {
			tempGeneralDeclarationCacheModel.CargoOnBoard = null;
		}

		tempGeneralDeclarationCacheModel.Cargo = getCargo();

		String Cargo = tempGeneralDeclarationCacheModel.Cargo;

		if ((Cargo != null) && (Cargo.length() == 0)) {
			tempGeneralDeclarationCacheModel.Cargo = null;
		}

		tempGeneralDeclarationCacheModel.VolumeCargo = getVolumeCargo();

		tempGeneralDeclarationCacheModel.CargoUnit = getCargoUnit();

		String CargoUnit = tempGeneralDeclarationCacheModel.CargoUnit;

		if ((CargoUnit != null) && (CargoUnit.length() == 0)) {
			tempGeneralDeclarationCacheModel.CargoUnit = null;
		}

		tempGeneralDeclarationCacheModel.CargoDescription = getCargoDescription();

		String CargoDescription = tempGeneralDeclarationCacheModel.CargoDescription;

		if ((CargoDescription != null) && (CargoDescription.length() == 0)) {
			tempGeneralDeclarationCacheModel.CargoDescription = null;
		}

		tempGeneralDeclarationCacheModel.ratedPower = getRatedPower();

		String ratedPower = tempGeneralDeclarationCacheModel.ratedPower;

		if ((ratedPower != null) && (ratedPower.length() == 0)) {
			tempGeneralDeclarationCacheModel.ratedPower = null;
		}

		tempGeneralDeclarationCacheModel.seatingCapacity = getSeatingCapacity();

		String seatingCapacity = tempGeneralDeclarationCacheModel.seatingCapacity;

		if ((seatingCapacity != null) && (seatingCapacity.length() == 0)) {
			tempGeneralDeclarationCacheModel.seatingCapacity = null;
		}

		tempGeneralDeclarationCacheModel.lyingCapacity = getLyingCapacity();

		String lyingCapacity = tempGeneralDeclarationCacheModel.lyingCapacity;

		if ((lyingCapacity != null) && (lyingCapacity.length() == 0)) {
			tempGeneralDeclarationCacheModel.lyingCapacity = null;
		}

		tempGeneralDeclarationCacheModel.maritimePortCode = getMaritimePortCode();

		String maritimePortCode = tempGeneralDeclarationCacheModel.maritimePortCode;

		if ((maritimePortCode != null) && (maritimePortCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.maritimePortCode = null;
		}

		tempGeneralDeclarationCacheModel.lastProvinceCode = getLastProvinceCode();

		String lastProvinceCode = tempGeneralDeclarationCacheModel.lastProvinceCode;

		if ((lastProvinceCode != null) && (lastProvinceCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.lastProvinceCode = null;
		}

		tempGeneralDeclarationCacheModel.nextProvinceCode = getNextProvinceCode();

		String nextProvinceCode = tempGeneralDeclarationCacheModel.nextProvinceCode;

		if ((nextProvinceCode != null) && (nextProvinceCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.nextProvinceCode = null;
		}

		tempGeneralDeclarationCacheModel.lastMaritimePortCode = getLastMaritimePortCode();

		String lastMaritimePortCode = tempGeneralDeclarationCacheModel.lastMaritimePortCode;

		if ((lastMaritimePortCode != null) &&
				(lastMaritimePortCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.lastMaritimePortCode = null;
		}

		tempGeneralDeclarationCacheModel.lastPortRegionCode = getLastPortRegionCode();

		String lastPortRegionCode = tempGeneralDeclarationCacheModel.lastPortRegionCode;

		if ((lastPortRegionCode != null) && (lastPortRegionCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.lastPortRegionCode = null;
		}

		tempGeneralDeclarationCacheModel.lastPortHarbourCode = getLastPortHarbourCode();

		String lastPortHarbourCode = tempGeneralDeclarationCacheModel.lastPortHarbourCode;

		if ((lastPortHarbourCode != null) &&
				(lastPortHarbourCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.lastPortHarbourCode = null;
		}

		tempGeneralDeclarationCacheModel.lastPortWharfCode = getLastPortWharfCode();

		String lastPortWharfCode = tempGeneralDeclarationCacheModel.lastPortWharfCode;

		if ((lastPortWharfCode != null) && (lastPortWharfCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.lastPortWharfCode = null;
		}

		tempGeneralDeclarationCacheModel.nextMaritimePortCode = getNextMaritimePortCode();

		String nextMaritimePortCode = tempGeneralDeclarationCacheModel.nextMaritimePortCode;

		if ((nextMaritimePortCode != null) &&
				(nextMaritimePortCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.nextMaritimePortCode = null;
		}

		tempGeneralDeclarationCacheModel.nextPortRegionCode = getNextPortRegionCode();

		String nextPortRegionCode = tempGeneralDeclarationCacheModel.nextPortRegionCode;

		if ((nextPortRegionCode != null) && (nextPortRegionCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.nextPortRegionCode = null;
		}

		tempGeneralDeclarationCacheModel.nextPortHarbourCode = getNextPortHarbourCode();

		String nextPortHarbourCode = tempGeneralDeclarationCacheModel.nextPortHarbourCode;

		if ((nextPortHarbourCode != null) &&
				(nextPortHarbourCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.nextPortHarbourCode = null;
		}

		tempGeneralDeclarationCacheModel.nextPortWharfCode = getNextPortWharfCode();

		String nextPortWharfCode = tempGeneralDeclarationCacheModel.nextPortWharfCode;

		if ((nextPortWharfCode != null) && (nextPortWharfCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.nextPortWharfCode = null;
		}

		tempGeneralDeclarationCacheModel.link = getLink();

		String link = tempGeneralDeclarationCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			tempGeneralDeclarationCacheModel.link = null;
		}

		tempGeneralDeclarationCacheModel.qrCode = getQrCode();

		String qrCode = tempGeneralDeclarationCacheModel.qrCode;

		if ((qrCode != null) && (qrCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.qrCode = null;
		}

		tempGeneralDeclarationCacheModel.portClearanceNo = getPortClearanceNo();

		String portClearanceNo = tempGeneralDeclarationCacheModel.portClearanceNo;

		if ((portClearanceNo != null) && (portClearanceNo.length() == 0)) {
			tempGeneralDeclarationCacheModel.portClearanceNo = null;
		}

		tempGeneralDeclarationCacheModel.loa = getLoa();

		tempGeneralDeclarationCacheModel.unitLOA = getUnitLOA();

		String unitLOA = tempGeneralDeclarationCacheModel.unitLOA;

		if ((unitLOA != null) && (unitLOA.length() == 0)) {
			tempGeneralDeclarationCacheModel.unitLOA = null;
		}

		tempGeneralDeclarationCacheModel.breadth = getBreadth();

		tempGeneralDeclarationCacheModel.unitBreadth = getUnitBreadth();

		String unitBreadth = tempGeneralDeclarationCacheModel.unitBreadth;

		if ((unitBreadth != null) && (unitBreadth.length() == 0)) {
			tempGeneralDeclarationCacheModel.unitBreadth = null;
		}

		tempGeneralDeclarationCacheModel.clearanceHeight = getClearanceHeight();

		tempGeneralDeclarationCacheModel.unitClearanceHeight = getUnitClearanceHeight();

		String unitClearanceHeight = tempGeneralDeclarationCacheModel.unitClearanceHeight;

		if ((unitClearanceHeight != null) &&
				(unitClearanceHeight.length() == 0)) {
			tempGeneralDeclarationCacheModel.unitClearanceHeight = null;
		}

		tempGeneralDeclarationCacheModel.shownDraftxF = getShownDraftxF();

		tempGeneralDeclarationCacheModel.unitShownDraftxF = getUnitShownDraftxF();

		String unitShownDraftxF = tempGeneralDeclarationCacheModel.unitShownDraftxF;

		if ((unitShownDraftxF != null) && (unitShownDraftxF.length() == 0)) {
			tempGeneralDeclarationCacheModel.unitShownDraftxF = null;
		}

		tempGeneralDeclarationCacheModel.shownDraftxA = getShownDraftxA();

		tempGeneralDeclarationCacheModel.unitShownDraftxA = getUnitShownDraftxA();

		String unitShownDraftxA = tempGeneralDeclarationCacheModel.unitShownDraftxA;

		if ((unitShownDraftxA != null) && (unitShownDraftxA.length() == 0)) {
			tempGeneralDeclarationCacheModel.unitShownDraftxA = null;
		}

		tempGeneralDeclarationCacheModel.dwt = getDwt();

		tempGeneralDeclarationCacheModel.unitDWT = getUnitDWT();

		String unitDWT = tempGeneralDeclarationCacheModel.unitDWT;

		if ((unitDWT != null) && (unitDWT.length() == 0)) {
			tempGeneralDeclarationCacheModel.unitDWT = null;
		}

		Date timeOfPORTArrival = getTimeOfPORTArrival();

		if (timeOfPORTArrival != null) {
			tempGeneralDeclarationCacheModel.timeOfPORTArrival = timeOfPORTArrival.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.timeOfPORTArrival = Long.MIN_VALUE;
		}

		Date timeOfPilotOnBoard = getTimeOfPilotOnBoard();

		if (timeOfPilotOnBoard != null) {
			tempGeneralDeclarationCacheModel.timeOfPilotOnBoard = timeOfPilotOnBoard.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.timeOfPilotOnBoard = Long.MIN_VALUE;
		}

		tempGeneralDeclarationCacheModel.tugBoat = getTugBoat();

		String tugBoat = tempGeneralDeclarationCacheModel.tugBoat;

		if ((tugBoat != null) && (tugBoat.length() == 0)) {
			tempGeneralDeclarationCacheModel.tugBoat = null;
		}

		tempGeneralDeclarationCacheModel.do_ = getDo_();

		String do_ = tempGeneralDeclarationCacheModel.do_;

		if ((do_ != null) && (do_.length() == 0)) {
			tempGeneralDeclarationCacheModel.do_ = null;
		}

		tempGeneralDeclarationCacheModel.fo = getFo();

		String fo = tempGeneralDeclarationCacheModel.fo;

		if ((fo != null) && (fo.length() == 0)) {
			tempGeneralDeclarationCacheModel.fo = null;
		}

		tempGeneralDeclarationCacheModel.fw = getFw();

		String fw = tempGeneralDeclarationCacheModel.fw;

		if ((fw != null) && (fw.length() == 0)) {
			tempGeneralDeclarationCacheModel.fw = null;
		}

		tempGeneralDeclarationCacheModel.placeOfReception = getPlaceOfReception();

		String placeOfReception = tempGeneralDeclarationCacheModel.placeOfReception;

		if ((placeOfReception != null) && (placeOfReception.length() == 0)) {
			tempGeneralDeclarationCacheModel.placeOfReception = null;
		}

		tempGeneralDeclarationCacheModel.nameOfShipOwners = getNameOfShipOwners();

		String nameOfShipOwners = tempGeneralDeclarationCacheModel.nameOfShipOwners;

		if ((nameOfShipOwners != null) && (nameOfShipOwners.length() == 0)) {
			tempGeneralDeclarationCacheModel.nameOfShipOwners = null;
		}

		tempGeneralDeclarationCacheModel.addressOfShipOwners = getAddressOfShipOwners();

		String addressOfShipOwners = tempGeneralDeclarationCacheModel.addressOfShipOwners;

		if ((addressOfShipOwners != null) &&
				(addressOfShipOwners.length() == 0)) {
			tempGeneralDeclarationCacheModel.addressOfShipOwners = null;
		}

		return tempGeneralDeclarationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(193);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentReference=");
		sb.append(getDocumentReference());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", isArrival=");
		sb.append(getIsArrival());
		sb.append(", nameOfShip=");
		sb.append(getNameOfShip());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", imoNumber=");
		sb.append(getImoNumber());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", voyageNumber=");
		sb.append(getVoyageNumber());
		sb.append(", portOfArrivalCode=");
		sb.append(getPortOfArrivalCode());
		sb.append(", dateOfArrival=");
		sb.append(getDateOfArrival());
		sb.append(", portHarbourCode=");
		sb.append(getPortHarbourCode());
		sb.append(", portRegionCode=");
		sb.append(getPortRegionCode());
		sb.append(", portWharfCode=");
		sb.append(getPortWharfCode());
		sb.append(", flagStateOfShip=");
		sb.append(getFlagStateOfShip());
		sb.append(", nameOfMaster=");
		sb.append(getNameOfMaster());
		sb.append(", lastPortOfCallCode=");
		sb.append(getLastPortOfCallCode());
		sb.append(", certificateOfRegistryNumber=");
		sb.append(getCertificateOfRegistryNumber());
		sb.append(", certificateOfRegistryDate=");
		sb.append(getCertificateOfRegistryDate());
		sb.append(", certificateOfRegistryPortName=");
		sb.append(getCertificateOfRegistryPortName());
		sb.append(", taxCodeOfShipownersAgents=");
		sb.append(getTaxCodeOfShipownersAgents());
		sb.append(", nameOfShipownersAgents=");
		sb.append(getNameOfShipownersAgents());
		sb.append(", shipAgencyAddress=");
		sb.append(getShipAgencyAddress());
		sb.append(", shipAgencyPhone=");
		sb.append(getShipAgencyPhone());
		sb.append(", shipAgencyFax=");
		sb.append(getShipAgencyFax());
		sb.append(", shipAgencyEmail=");
		sb.append(getShipAgencyEmail());
		sb.append(", grossTonnage=");
		sb.append(getGrossTonnage());
		sb.append(", netTonnage=");
		sb.append(getNetTonnage());
		sb.append(", positionOfShipInport=");
		sb.append(getPositionOfShipInport());
		sb.append(", briefParticularsOfVoyage=");
		sb.append(getBriefParticularsOfVoyage());
		sb.append(", previousPortsOfCall=");
		sb.append(getPreviousPortsOfCall());
		sb.append(", subsequentPortsOfCall=");
		sb.append(getSubsequentPortsOfCall());
		sb.append(", dischargedPorts=");
		sb.append(getDischargedPorts());
		sb.append(", remainingCargo=");
		sb.append(getRemainingCargo());
		sb.append(", briefDescriptionOfTheCargo=");
		sb.append(getBriefDescriptionOfTheCargo());
		sb.append(", numberOfCrew=");
		sb.append(getNumberOfCrew());
		sb.append(", numberOfPassengers=");
		sb.append(getNumberOfPassengers());
		sb.append(", shipRequirementsInTermsOfWaste=");
		sb.append(getShipRequirementsInTermsOfWaste());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", numberCargoDeclaration=");
		sb.append(getNumberCargoDeclaration());
		sb.append(", numberShipStoreDeclaration=");
		sb.append(getNumberShipStoreDeclaration());
		sb.append(", numberCrewList=");
		sb.append(getNumberCrewList());
		sb.append(", numberPassengerList=");
		sb.append(getNumberPassengerList());
		sb.append(", numberCrewEffects=");
		sb.append(getNumberCrewEffects());
		sb.append(", numberHealthMaritime=");
		sb.append(getNumberHealthMaritime());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", masterSigned=");
		sb.append(getMasterSigned());
		sb.append(", masterSignedImage=");
		sb.append(getMasterSignedImage());
		sb.append(", CargoOnBoard=");
		sb.append(getCargoOnBoard());
		sb.append(", Cargo=");
		sb.append(getCargo());
		sb.append(", VolumeCargo=");
		sb.append(getVolumeCargo());
		sb.append(", CargoUnit=");
		sb.append(getCargoUnit());
		sb.append(", CargoDescription=");
		sb.append(getCargoDescription());
		sb.append(", ratedPower=");
		sb.append(getRatedPower());
		sb.append(", seatingCapacity=");
		sb.append(getSeatingCapacity());
		sb.append(", lyingCapacity=");
		sb.append(getLyingCapacity());
		sb.append(", maritimePortCode=");
		sb.append(getMaritimePortCode());
		sb.append(", lastProvinceCode=");
		sb.append(getLastProvinceCode());
		sb.append(", nextProvinceCode=");
		sb.append(getNextProvinceCode());
		sb.append(", lastMaritimePortCode=");
		sb.append(getLastMaritimePortCode());
		sb.append(", lastPortRegionCode=");
		sb.append(getLastPortRegionCode());
		sb.append(", lastPortHarbourCode=");
		sb.append(getLastPortHarbourCode());
		sb.append(", lastPortWharfCode=");
		sb.append(getLastPortWharfCode());
		sb.append(", nextMaritimePortCode=");
		sb.append(getNextMaritimePortCode());
		sb.append(", nextPortRegionCode=");
		sb.append(getNextPortRegionCode());
		sb.append(", nextPortHarbourCode=");
		sb.append(getNextPortHarbourCode());
		sb.append(", nextPortWharfCode=");
		sb.append(getNextPortWharfCode());
		sb.append(", link=");
		sb.append(getLink());
		sb.append(", qrCode=");
		sb.append(getQrCode());
		sb.append(", portClearanceNo=");
		sb.append(getPortClearanceNo());
		sb.append(", loa=");
		sb.append(getLoa());
		sb.append(", unitLOA=");
		sb.append(getUnitLOA());
		sb.append(", breadth=");
		sb.append(getBreadth());
		sb.append(", unitBreadth=");
		sb.append(getUnitBreadth());
		sb.append(", clearanceHeight=");
		sb.append(getClearanceHeight());
		sb.append(", unitClearanceHeight=");
		sb.append(getUnitClearanceHeight());
		sb.append(", shownDraftxF=");
		sb.append(getShownDraftxF());
		sb.append(", unitShownDraftxF=");
		sb.append(getUnitShownDraftxF());
		sb.append(", shownDraftxA=");
		sb.append(getShownDraftxA());
		sb.append(", unitShownDraftxA=");
		sb.append(getUnitShownDraftxA());
		sb.append(", dwt=");
		sb.append(getDwt());
		sb.append(", unitDWT=");
		sb.append(getUnitDWT());
		sb.append(", timeOfPORTArrival=");
		sb.append(getTimeOfPORTArrival());
		sb.append(", timeOfPilotOnBoard=");
		sb.append(getTimeOfPilotOnBoard());
		sb.append(", tugBoat=");
		sb.append(getTugBoat());
		sb.append(", do_=");
		sb.append(getDo_());
		sb.append(", fo=");
		sb.append(getFo());
		sb.append(", fw=");
		sb.append(getFw());
		sb.append(", placeOfReception=");
		sb.append(getPlaceOfReception());
		sb.append(", nameOfShipOwners=");
		sb.append(getNameOfShipOwners());
		sb.append(", addressOfShipOwners=");
		sb.append(getAddressOfShipOwners());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(292);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempGeneralDeclaration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentReference</column-name><column-value><![CDATA[");
		sb.append(getDocumentReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isArrival</column-name><column-value><![CDATA[");
		sb.append(getIsArrival());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShip</column-name><column-value><![CDATA[");
		sb.append(getNameOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imoNumber</column-name><column-value><![CDATA[");
		sb.append(getImoNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>voyageNumber</column-name><column-value><![CDATA[");
		sb.append(getVoyageNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portOfArrivalCode</column-name><column-value><![CDATA[");
		sb.append(getPortOfArrivalCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfArrival</column-name><column-value><![CDATA[");
		sb.append(getDateOfArrival());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portRegionCode</column-name><column-value><![CDATA[");
		sb.append(getPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portWharfCode</column-name><column-value><![CDATA[");
		sb.append(getPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagStateOfShip</column-name><column-value><![CDATA[");
		sb.append(getFlagStateOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfMaster</column-name><column-value><![CDATA[");
		sb.append(getNameOfMaster());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPortOfCallCode</column-name><column-value><![CDATA[");
		sb.append(getLastPortOfCallCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryNumber</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryPortName</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryPortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxCodeOfShipownersAgents</column-name><column-value><![CDATA[");
		sb.append(getTaxCodeOfShipownersAgents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShipownersAgents</column-name><column-value><![CDATA[");
		sb.append(getNameOfShipownersAgents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyAddress</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyPhone</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyFax</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyEmail</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossTonnage</column-name><column-value><![CDATA[");
		sb.append(getGrossTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netTonnage</column-name><column-value><![CDATA[");
		sb.append(getNetTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionOfShipInport</column-name><column-value><![CDATA[");
		sb.append(getPositionOfShipInport());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>briefParticularsOfVoyage</column-name><column-value><![CDATA[");
		sb.append(getBriefParticularsOfVoyage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousPortsOfCall</column-name><column-value><![CDATA[");
		sb.append(getPreviousPortsOfCall());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subsequentPortsOfCall</column-name><column-value><![CDATA[");
		sb.append(getSubsequentPortsOfCall());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dischargedPorts</column-name><column-value><![CDATA[");
		sb.append(getDischargedPorts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingCargo</column-name><column-value><![CDATA[");
		sb.append(getRemainingCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>briefDescriptionOfTheCargo</column-name><column-value><![CDATA[");
		sb.append(getBriefDescriptionOfTheCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfCrew</column-name><column-value><![CDATA[");
		sb.append(getNumberOfCrew());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfPassengers</column-name><column-value><![CDATA[");
		sb.append(getNumberOfPassengers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipRequirementsInTermsOfWaste</column-name><column-value><![CDATA[");
		sb.append(getShipRequirementsInTermsOfWaste());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberCargoDeclaration</column-name><column-value><![CDATA[");
		sb.append(getNumberCargoDeclaration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberShipStoreDeclaration</column-name><column-value><![CDATA[");
		sb.append(getNumberShipStoreDeclaration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberCrewList</column-name><column-value><![CDATA[");
		sb.append(getNumberCrewList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberPassengerList</column-name><column-value><![CDATA[");
		sb.append(getNumberPassengerList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberCrewEffects</column-name><column-value><![CDATA[");
		sb.append(getNumberCrewEffects());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberHealthMaritime</column-name><column-value><![CDATA[");
		sb.append(getNumberHealthMaritime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSigned</column-name><column-value><![CDATA[");
		sb.append(getMasterSigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSignedImage</column-name><column-value><![CDATA[");
		sb.append(getMasterSignedImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CargoOnBoard</column-name><column-value><![CDATA[");
		sb.append(getCargoOnBoard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Cargo</column-name><column-value><![CDATA[");
		sb.append(getCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>VolumeCargo</column-name><column-value><![CDATA[");
		sb.append(getVolumeCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CargoUnit</column-name><column-value><![CDATA[");
		sb.append(getCargoUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CargoDescription</column-name><column-value><![CDATA[");
		sb.append(getCargoDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ratedPower</column-name><column-value><![CDATA[");
		sb.append(getRatedPower());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>seatingCapacity</column-name><column-value><![CDATA[");
		sb.append(getSeatingCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lyingCapacity</column-name><column-value><![CDATA[");
		sb.append(getLyingCapacity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritimePortCode</column-name><column-value><![CDATA[");
		sb.append(getMaritimePortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastProvinceCode</column-name><column-value><![CDATA[");
		sb.append(getLastProvinceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextProvinceCode</column-name><column-value><![CDATA[");
		sb.append(getNextProvinceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastMaritimePortCode</column-name><column-value><![CDATA[");
		sb.append(getLastMaritimePortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPortRegionCode</column-name><column-value><![CDATA[");
		sb.append(getLastPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPortHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getLastPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPortWharfCode</column-name><column-value><![CDATA[");
		sb.append(getLastPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextMaritimePortCode</column-name><column-value><![CDATA[");
		sb.append(getNextMaritimePortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextPortRegionCode</column-name><column-value><![CDATA[");
		sb.append(getNextPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextPortHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getNextPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextPortWharfCode</column-name><column-value><![CDATA[");
		sb.append(getNextPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>link</column-name><column-value><![CDATA[");
		sb.append(getLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qrCode</column-name><column-value><![CDATA[");
		sb.append(getQrCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portClearanceNo</column-name><column-value><![CDATA[");
		sb.append(getPortClearanceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loa</column-name><column-value><![CDATA[");
		sb.append(getLoa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitLOA</column-name><column-value><![CDATA[");
		sb.append(getUnitLOA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>breadth</column-name><column-value><![CDATA[");
		sb.append(getBreadth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitBreadth</column-name><column-value><![CDATA[");
		sb.append(getUnitBreadth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clearanceHeight</column-name><column-value><![CDATA[");
		sb.append(getClearanceHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitClearanceHeight</column-name><column-value><![CDATA[");
		sb.append(getUnitClearanceHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shownDraftxF</column-name><column-value><![CDATA[");
		sb.append(getShownDraftxF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxF</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxF());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shownDraftxA</column-name><column-value><![CDATA[");
		sb.append(getShownDraftxA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitShownDraftxA</column-name><column-value><![CDATA[");
		sb.append(getUnitShownDraftxA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwt</column-name><column-value><![CDATA[");
		sb.append(getDwt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitDWT</column-name><column-value><![CDATA[");
		sb.append(getUnitDWT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeOfPORTArrival</column-name><column-value><![CDATA[");
		sb.append(getTimeOfPORTArrival());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeOfPilotOnBoard</column-name><column-value><![CDATA[");
		sb.append(getTimeOfPilotOnBoard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tugBoat</column-name><column-value><![CDATA[");
		sb.append(getTugBoat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>do_</column-name><column-value><![CDATA[");
		sb.append(getDo_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fo</column-name><column-value><![CDATA[");
		sb.append(getFo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fw</column-name><column-value><![CDATA[");
		sb.append(getFw());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeOfReception</column-name><column-value><![CDATA[");
		sb.append(getPlaceOfReception());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShipOwners</column-name><column-value><![CDATA[");
		sb.append(getNameOfShipOwners());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressOfShipOwners</column-name><column-value><![CDATA[");
		sb.append(getAddressOfShipOwners());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempGeneralDeclaration.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempGeneralDeclaration.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private long _documentReference;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _userCreated;
	private int _isArrival;
	private String _nameOfShip;
	private String _shipTypeCode;
	private String _imoNumber;
	private String _callSign;
	private String _voyageNumber;
	private String _portOfArrivalCode;
	private Date _dateOfArrival;
	private String _portHarbourCode;
	private String _portRegionCode;
	private String _portWharfCode;
	private String _flagStateOfShip;
	private String _nameOfMaster;
	private String _lastPortOfCallCode;
	private String _certificateOfRegistryNumber;
	private Date _certificateOfRegistryDate;
	private String _certificateOfRegistryPortName;
	private String _taxCodeOfShipownersAgents;
	private String _nameOfShipownersAgents;
	private String _shipAgencyAddress;
	private String _shipAgencyPhone;
	private String _shipAgencyFax;
	private String _shipAgencyEmail;
	private double _grossTonnage;
	private double _netTonnage;
	private String _positionOfShipInport;
	private String _briefParticularsOfVoyage;
	private String _previousPortsOfCall;
	private String _subsequentPortsOfCall;
	private String _dischargedPorts;
	private String _remainingCargo;
	private String _briefDescriptionOfTheCargo;
	private int _numberOfCrew;
	private int _numberOfPassengers;
	private String _shipRequirementsInTermsOfWaste;
	private String _remarks;
	private String _numberCargoDeclaration;
	private String _numberShipStoreDeclaration;
	private String _numberCrewList;
	private String _numberPassengerList;
	private String _numberCrewEffects;
	private String _numberHealthMaritime;
	private String _signPlace;
	private Date _signDate;
	private int _masterSigned;
	private int _masterSignedImage;
	private String _CargoOnBoard;
	private String _Cargo;
	private double _VolumeCargo;
	private String _CargoUnit;
	private String _CargoDescription;
	private String _ratedPower;
	private String _seatingCapacity;
	private String _lyingCapacity;
	private String _maritimePortCode;
	private String _lastProvinceCode;
	private String _nextProvinceCode;
	private String _lastMaritimePortCode;
	private String _lastPortRegionCode;
	private String _lastPortHarbourCode;
	private String _lastPortWharfCode;
	private String _nextMaritimePortCode;
	private String _nextPortRegionCode;
	private String _nextPortHarbourCode;
	private String _nextPortWharfCode;
	private String _link;
	private String _qrCode;
	private String _portClearanceNo;
	private double _loa;
	private String _unitLOA;
	private double _breadth;
	private String _unitBreadth;
	private double _clearanceHeight;
	private String _unitClearanceHeight;
	private double _shownDraftxF;
	private String _unitShownDraftxF;
	private double _shownDraftxA;
	private String _unitShownDraftxA;
	private double _dwt;
	private String _unitDWT;
	private Date _timeOfPORTArrival;
	private Date _timeOfPilotOnBoard;
	private String _tugBoat;
	private String _do_;
	private String _fo;
	private String _fw;
	private String _placeOfReception;
	private String _nameOfShipOwners;
	private String _addressOfShipOwners;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempGeneralDeclaration _escapedModelProxy;
}