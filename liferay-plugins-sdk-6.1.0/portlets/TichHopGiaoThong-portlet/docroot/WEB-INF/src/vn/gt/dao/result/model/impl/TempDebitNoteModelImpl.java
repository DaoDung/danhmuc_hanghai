/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.result.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.result.model.TempDebitNote;
import vn.gt.dao.result.model.TempDebitNoteModel;
import vn.gt.dao.result.model.TempDebitNoteSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempDebitNote service. Represents a row in the &quot;temp_debitnote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.result.model.TempDebitNoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempDebitNoteImpl}.
 * </p>
 *
 * @author win_64
 * @see TempDebitNoteImpl
 * @see vn.gt.dao.result.model.TempDebitNote
 * @see vn.gt.dao.result.model.TempDebitNoteModel
 * @generated
 */
@JSON(strict = true)
public class TempDebitNoteModelImpl extends BaseModelImpl<TempDebitNote>
	implements TempDebitNoteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp debit note model instance should use the {@link vn.gt.dao.result.model.TempDebitNote} interface instead.
	 */
	public static final String TABLE_NAME = "temp_debitnote";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "ATTACHEDFILE", Types.BIGINT },
			{ "corporationid", Types.VARCHAR },
			{ "debitnotenumber", Types.VARCHAR },
			{ "division", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "financialaccountant", Types.VARCHAR },
			{ "fromdate", Types.TIMESTAMP },
			{ "markasdeleted", Types.INTEGER },
			{ "organization", Types.VARCHAR },
			{ "paymenttype", Types.INTEGER },
			{ "reportby", Types.VARCHAR },
			{ "reportdate", Types.TIMESTAMP },
			{ "todate", Types.TIMESTAMP },
			{ "totalpayment", Types.DOUBLE },
			{ "transactionid", Types.VARCHAR },
			{ "mariTimeCode", Types.INTEGER },
			{ "comments", Types.VARCHAR },
			{ "documentTypeCode", Types.VARCHAR },
			{ "keypayGoodCode", Types.VARCHAR },
			{ "keypayMerchantCode", Types.VARCHAR },
			{ "paymentGateStatusCode", Types.VARCHAR },
			{ "paymentGateResponseData", Types.VARCHAR },
			{ "paymentGateCheckCode", Types.INTEGER },
			{ "paymentGateCheckResponseData", Types.VARCHAR },
			{ "keypayURL", Types.VARCHAR },
			{ "currency", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table temp_debitnote (id LONG not null primary key,ATTACHEDFILE LONG,corporationid VARCHAR(75) null,debitnotenumber VARCHAR(75) null,division VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,financialaccountant VARCHAR(75) null,fromdate DATE null,markasdeleted INTEGER,organization VARCHAR(75) null,paymenttype INTEGER,reportby VARCHAR(75) null,reportdate DATE null,todate DATE null,totalpayment DOUBLE,transactionid VARCHAR(75) null,mariTimeCode INTEGER,comments VARCHAR(75) null,documentTypeCode VARCHAR(75) null,keypayGoodCode VARCHAR(75) null,keypayMerchantCode VARCHAR(75) null,paymentGateStatusCode VARCHAR(75) null,paymentGateResponseData VARCHAR(75) null,paymentGateCheckCode INTEGER,paymentGateCheckResponseData VARCHAR(75) null,keypayURL VARCHAR(75) null,currency VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table temp_debitnote";
	public static final String ORDER_BY_JPQL = " ORDER BY tempDebitNote.reportdate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY temp_debitnote.reportdate DESC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.result.model.TempDebitNote"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.result.model.TempDebitNote"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.result.model.TempDebitNote"),
			true);
	public static long DEBITNOTENUMBER_COLUMN_BITMASK = 1L;
	public static long DOCUMENTNAME_COLUMN_BITMASK = 2L;
	public static long DOCUMENTTYPECODE_COLUMN_BITMASK = 4L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 8L;
	public static long MARITIMECODE_COLUMN_BITMASK = 16L;
	public static long MARKASDELETED_COLUMN_BITMASK = 32L;
	public static long TRANSACTIONID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempDebitNote toModel(TempDebitNoteSoap soapModel) {
		TempDebitNote model = new TempDebitNoteImpl();

		model.setId(soapModel.getId());
		model.setATTACHEDFILE(soapModel.getATTACHEDFILE());
		model.setCorporationid(soapModel.getCorporationid());
		model.setDebitnotenumber(soapModel.getDebitnotenumber());
		model.setDivision(soapModel.getDivision());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setFinancialaccountant(soapModel.getFinancialaccountant());
		model.setFromdate(soapModel.getFromdate());
		model.setMarkasdeleted(soapModel.getMarkasdeleted());
		model.setOrganization(soapModel.getOrganization());
		model.setPaymenttype(soapModel.getPaymenttype());
		model.setReportby(soapModel.getReportby());
		model.setReportdate(soapModel.getReportdate());
		model.setTodate(soapModel.getTodate());
		model.setTotalpayment(soapModel.getTotalpayment());
		model.setTransactionid(soapModel.getTransactionid());
		model.setMariTimeCode(soapModel.getMariTimeCode());
		model.setComments(soapModel.getComments());
		model.setDocumentTypeCode(soapModel.getDocumentTypeCode());
		model.setKeypayGoodCode(soapModel.getKeypayGoodCode());
		model.setKeypayMerchantCode(soapModel.getKeypayMerchantCode());
		model.setPaymentGateStatusCode(soapModel.getPaymentGateStatusCode());
		model.setPaymentGateResponseData(soapModel.getPaymentGateResponseData());
		model.setPaymentGateCheckCode(soapModel.getPaymentGateCheckCode());
		model.setPaymentGateCheckResponseData(soapModel.getPaymentGateCheckResponseData());
		model.setKeypayURL(soapModel.getKeypayURL());
		model.setCurrency(soapModel.getCurrency());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempDebitNote> toModels(TempDebitNoteSoap[] soapModels) {
		List<TempDebitNote> models = new ArrayList<TempDebitNote>(soapModels.length);

		for (TempDebitNoteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.result.model.TempDebitNote"));

	public TempDebitNoteModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempDebitNote.class;
	}

	public String getModelClassName() {
		return TempDebitNote.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public long getATTACHEDFILE() {
		return _ATTACHEDFILE;
	}

	public void setATTACHEDFILE(long ATTACHEDFILE) {
		_ATTACHEDFILE = ATTACHEDFILE;
	}

	@JSON
	public String getCorporationid() {
		if (_corporationid == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationid;
		}
	}

	public void setCorporationid(String corporationid) {
		_corporationid = corporationid;
	}

	@JSON
	public String getDebitnotenumber() {
		if (_debitnotenumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _debitnotenumber;
		}
	}

	public void setDebitnotenumber(String debitnotenumber) {
		_columnBitmask |= DEBITNOTENUMBER_COLUMN_BITMASK;

		if (_originalDebitnotenumber == null) {
			_originalDebitnotenumber = _debitnotenumber;
		}

		_debitnotenumber = debitnotenumber;
	}

	public String getOriginalDebitnotenumber() {
		return GetterUtil.getString(_originalDebitnotenumber);
	}

	@JSON
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public String getFinancialaccountant() {
		if (_financialaccountant == null) {
			return StringPool.BLANK;
		}
		else {
			return _financialaccountant;
		}
	}

	public void setFinancialaccountant(String financialaccountant) {
		_financialaccountant = financialaccountant;
	}

	@JSON
	public Date getFromdate() {
		return _fromdate;
	}

	public void setFromdate(Date fromdate) {
		_fromdate = fromdate;
	}

	@JSON
	public int getMarkasdeleted() {
		return _markasdeleted;
	}

	public void setMarkasdeleted(int markasdeleted) {
		_columnBitmask |= MARKASDELETED_COLUMN_BITMASK;

		if (!_setOriginalMarkasdeleted) {
			_setOriginalMarkasdeleted = true;

			_originalMarkasdeleted = _markasdeleted;
		}

		_markasdeleted = markasdeleted;
	}

	public int getOriginalMarkasdeleted() {
		return _originalMarkasdeleted;
	}

	@JSON
	public String getOrganization() {
		if (_organization == null) {
			return StringPool.BLANK;
		}
		else {
			return _organization;
		}
	}

	public void setOrganization(String organization) {
		_organization = organization;
	}

	@JSON
	public int getPaymenttype() {
		return _paymenttype;
	}

	public void setPaymenttype(int paymenttype) {
		_paymenttype = paymenttype;
	}

	@JSON
	public String getReportby() {
		if (_reportby == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportby;
		}
	}

	public void setReportby(String reportby) {
		_reportby = reportby;
	}

	@JSON
	public Date getReportdate() {
		return _reportdate;
	}

	public void setReportdate(Date reportdate) {
		_columnBitmask = -1L;

		_reportdate = reportdate;
	}

	@JSON
	public Date getTodate() {
		return _todate;
	}

	public void setTodate(Date todate) {
		_todate = todate;
	}

	@JSON
	public double getTotalpayment() {
		return _totalpayment;
	}

	public void setTotalpayment(double totalpayment) {
		_totalpayment = totalpayment;
	}

	@JSON
	public String getTransactionid() {
		if (_transactionid == null) {
			return StringPool.BLANK;
		}
		else {
			return _transactionid;
		}
	}

	public void setTransactionid(String transactionid) {
		_columnBitmask |= TRANSACTIONID_COLUMN_BITMASK;

		if (_originalTransactionid == null) {
			_originalTransactionid = _transactionid;
		}

		_transactionid = transactionid;
	}

	public String getOriginalTransactionid() {
		return GetterUtil.getString(_originalTransactionid);
	}

	@JSON
	public int getMariTimeCode() {
		return _mariTimeCode;
	}

	public void setMariTimeCode(int mariTimeCode) {
		_columnBitmask |= MARITIMECODE_COLUMN_BITMASK;

		if (!_setOriginalMariTimeCode) {
			_setOriginalMariTimeCode = true;

			_originalMariTimeCode = _mariTimeCode;
		}

		_mariTimeCode = mariTimeCode;
	}

	public int getOriginalMariTimeCode() {
		return _originalMariTimeCode;
	}

	@JSON
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	public void setComments(String comments) {
		_comments = comments;
	}

	@JSON
	public String getDocumentTypeCode() {
		if (_documentTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentTypeCode;
		}
	}

	public void setDocumentTypeCode(String documentTypeCode) {
		_columnBitmask |= DOCUMENTTYPECODE_COLUMN_BITMASK;

		if (_originalDocumentTypeCode == null) {
			_originalDocumentTypeCode = _documentTypeCode;
		}

		_documentTypeCode = documentTypeCode;
	}

	public String getOriginalDocumentTypeCode() {
		return GetterUtil.getString(_originalDocumentTypeCode);
	}

	@JSON
	public String getKeypayGoodCode() {
		if (_keypayGoodCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _keypayGoodCode;
		}
	}

	public void setKeypayGoodCode(String keypayGoodCode) {
		_keypayGoodCode = keypayGoodCode;
	}

	@JSON
	public String getKeypayMerchantCode() {
		if (_keypayMerchantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _keypayMerchantCode;
		}
	}

	public void setKeypayMerchantCode(String keypayMerchantCode) {
		_keypayMerchantCode = keypayMerchantCode;
	}

	@JSON
	public String getPaymentGateStatusCode() {
		if (_paymentGateStatusCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _paymentGateStatusCode;
		}
	}

	public void setPaymentGateStatusCode(String paymentGateStatusCode) {
		_paymentGateStatusCode = paymentGateStatusCode;
	}

	@JSON
	public String getPaymentGateResponseData() {
		if (_paymentGateResponseData == null) {
			return StringPool.BLANK;
		}
		else {
			return _paymentGateResponseData;
		}
	}

	public void setPaymentGateResponseData(String paymentGateResponseData) {
		_paymentGateResponseData = paymentGateResponseData;
	}

	@JSON
	public int getPaymentGateCheckCode() {
		return _paymentGateCheckCode;
	}

	public void setPaymentGateCheckCode(int paymentGateCheckCode) {
		_paymentGateCheckCode = paymentGateCheckCode;
	}

	@JSON
	public String getPaymentGateCheckResponseData() {
		if (_paymentGateCheckResponseData == null) {
			return StringPool.BLANK;
		}
		else {
			return _paymentGateCheckResponseData;
		}
	}

	public void setPaymentGateCheckResponseData(
		String paymentGateCheckResponseData) {
		_paymentGateCheckResponseData = paymentGateCheckResponseData;
	}

	@JSON
	public String getKeypayURL() {
		if (_keypayURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _keypayURL;
		}
	}

	public void setKeypayURL(String keypayURL) {
		_keypayURL = keypayURL;
	}

	@JSON
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	public void setCurrency(String currency) {
		_currency = currency;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempDebitNote toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempDebitNote)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempDebitNote.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempDebitNoteImpl tempDebitNoteImpl = new TempDebitNoteImpl();

		tempDebitNoteImpl.setId(getId());
		tempDebitNoteImpl.setATTACHEDFILE(getATTACHEDFILE());
		tempDebitNoteImpl.setCorporationid(getCorporationid());
		tempDebitNoteImpl.setDebitnotenumber(getDebitnotenumber());
		tempDebitNoteImpl.setDivision(getDivision());
		tempDebitNoteImpl.setDocumentName(getDocumentName());
		tempDebitNoteImpl.setDocumentYear(getDocumentYear());
		tempDebitNoteImpl.setFinancialaccountant(getFinancialaccountant());
		tempDebitNoteImpl.setFromdate(getFromdate());
		tempDebitNoteImpl.setMarkasdeleted(getMarkasdeleted());
		tempDebitNoteImpl.setOrganization(getOrganization());
		tempDebitNoteImpl.setPaymenttype(getPaymenttype());
		tempDebitNoteImpl.setReportby(getReportby());
		tempDebitNoteImpl.setReportdate(getReportdate());
		tempDebitNoteImpl.setTodate(getTodate());
		tempDebitNoteImpl.setTotalpayment(getTotalpayment());
		tempDebitNoteImpl.setTransactionid(getTransactionid());
		tempDebitNoteImpl.setMariTimeCode(getMariTimeCode());
		tempDebitNoteImpl.setComments(getComments());
		tempDebitNoteImpl.setDocumentTypeCode(getDocumentTypeCode());
		tempDebitNoteImpl.setKeypayGoodCode(getKeypayGoodCode());
		tempDebitNoteImpl.setKeypayMerchantCode(getKeypayMerchantCode());
		tempDebitNoteImpl.setPaymentGateStatusCode(getPaymentGateStatusCode());
		tempDebitNoteImpl.setPaymentGateResponseData(getPaymentGateResponseData());
		tempDebitNoteImpl.setPaymentGateCheckCode(getPaymentGateCheckCode());
		tempDebitNoteImpl.setPaymentGateCheckResponseData(getPaymentGateCheckResponseData());
		tempDebitNoteImpl.setKeypayURL(getKeypayURL());
		tempDebitNoteImpl.setCurrency(getCurrency());

		tempDebitNoteImpl.resetOriginalValues();

		return tempDebitNoteImpl;
	}

	public int compareTo(TempDebitNote tempDebitNote) {
		int value = 0;

		value = DateUtil.compareTo(getReportdate(),
				tempDebitNote.getReportdate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempDebitNote tempDebitNote = null;

		try {
			tempDebitNote = (TempDebitNote)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempDebitNote.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempDebitNoteModelImpl tempDebitNoteModelImpl = this;

		tempDebitNoteModelImpl._originalDebitnotenumber = tempDebitNoteModelImpl._debitnotenumber;

		tempDebitNoteModelImpl._originalDocumentName = tempDebitNoteModelImpl._documentName;

		tempDebitNoteModelImpl._setOriginalDocumentName = false;

		tempDebitNoteModelImpl._originalDocumentYear = tempDebitNoteModelImpl._documentYear;

		tempDebitNoteModelImpl._setOriginalDocumentYear = false;

		tempDebitNoteModelImpl._originalMarkasdeleted = tempDebitNoteModelImpl._markasdeleted;

		tempDebitNoteModelImpl._setOriginalMarkasdeleted = false;

		tempDebitNoteModelImpl._originalTransactionid = tempDebitNoteModelImpl._transactionid;

		tempDebitNoteModelImpl._originalMariTimeCode = tempDebitNoteModelImpl._mariTimeCode;

		tempDebitNoteModelImpl._setOriginalMariTimeCode = false;

		tempDebitNoteModelImpl._originalDocumentTypeCode = tempDebitNoteModelImpl._documentTypeCode;

		tempDebitNoteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempDebitNote> toCacheModel() {
		TempDebitNoteCacheModel tempDebitNoteCacheModel = new TempDebitNoteCacheModel();

		tempDebitNoteCacheModel.id = getId();

		tempDebitNoteCacheModel.ATTACHEDFILE = getATTACHEDFILE();

		tempDebitNoteCacheModel.corporationid = getCorporationid();

		String corporationid = tempDebitNoteCacheModel.corporationid;

		if ((corporationid != null) && (corporationid.length() == 0)) {
			tempDebitNoteCacheModel.corporationid = null;
		}

		tempDebitNoteCacheModel.debitnotenumber = getDebitnotenumber();

		String debitnotenumber = tempDebitNoteCacheModel.debitnotenumber;

		if ((debitnotenumber != null) && (debitnotenumber.length() == 0)) {
			tempDebitNoteCacheModel.debitnotenumber = null;
		}

		tempDebitNoteCacheModel.division = getDivision();

		String division = tempDebitNoteCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			tempDebitNoteCacheModel.division = null;
		}

		tempDebitNoteCacheModel.documentName = getDocumentName();

		tempDebitNoteCacheModel.documentYear = getDocumentYear();

		tempDebitNoteCacheModel.financialaccountant = getFinancialaccountant();

		String financialaccountant = tempDebitNoteCacheModel.financialaccountant;

		if ((financialaccountant != null) &&
				(financialaccountant.length() == 0)) {
			tempDebitNoteCacheModel.financialaccountant = null;
		}

		Date fromdate = getFromdate();

		if (fromdate != null) {
			tempDebitNoteCacheModel.fromdate = fromdate.getTime();
		}
		else {
			tempDebitNoteCacheModel.fromdate = Long.MIN_VALUE;
		}

		tempDebitNoteCacheModel.markasdeleted = getMarkasdeleted();

		tempDebitNoteCacheModel.organization = getOrganization();

		String organization = tempDebitNoteCacheModel.organization;

		if ((organization != null) && (organization.length() == 0)) {
			tempDebitNoteCacheModel.organization = null;
		}

		tempDebitNoteCacheModel.paymenttype = getPaymenttype();

		tempDebitNoteCacheModel.reportby = getReportby();

		String reportby = tempDebitNoteCacheModel.reportby;

		if ((reportby != null) && (reportby.length() == 0)) {
			tempDebitNoteCacheModel.reportby = null;
		}

		Date reportdate = getReportdate();

		if (reportdate != null) {
			tempDebitNoteCacheModel.reportdate = reportdate.getTime();
		}
		else {
			tempDebitNoteCacheModel.reportdate = Long.MIN_VALUE;
		}

		Date todate = getTodate();

		if (todate != null) {
			tempDebitNoteCacheModel.todate = todate.getTime();
		}
		else {
			tempDebitNoteCacheModel.todate = Long.MIN_VALUE;
		}

		tempDebitNoteCacheModel.totalpayment = getTotalpayment();

		tempDebitNoteCacheModel.transactionid = getTransactionid();

		String transactionid = tempDebitNoteCacheModel.transactionid;

		if ((transactionid != null) && (transactionid.length() == 0)) {
			tempDebitNoteCacheModel.transactionid = null;
		}

		tempDebitNoteCacheModel.mariTimeCode = getMariTimeCode();

		tempDebitNoteCacheModel.comments = getComments();

		String comments = tempDebitNoteCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			tempDebitNoteCacheModel.comments = null;
		}

		tempDebitNoteCacheModel.documentTypeCode = getDocumentTypeCode();

		String documentTypeCode = tempDebitNoteCacheModel.documentTypeCode;

		if ((documentTypeCode != null) && (documentTypeCode.length() == 0)) {
			tempDebitNoteCacheModel.documentTypeCode = null;
		}

		tempDebitNoteCacheModel.keypayGoodCode = getKeypayGoodCode();

		String keypayGoodCode = tempDebitNoteCacheModel.keypayGoodCode;

		if ((keypayGoodCode != null) && (keypayGoodCode.length() == 0)) {
			tempDebitNoteCacheModel.keypayGoodCode = null;
		}

		tempDebitNoteCacheModel.keypayMerchantCode = getKeypayMerchantCode();

		String keypayMerchantCode = tempDebitNoteCacheModel.keypayMerchantCode;

		if ((keypayMerchantCode != null) && (keypayMerchantCode.length() == 0)) {
			tempDebitNoteCacheModel.keypayMerchantCode = null;
		}

		tempDebitNoteCacheModel.paymentGateStatusCode = getPaymentGateStatusCode();

		String paymentGateStatusCode = tempDebitNoteCacheModel.paymentGateStatusCode;

		if ((paymentGateStatusCode != null) &&
				(paymentGateStatusCode.length() == 0)) {
			tempDebitNoteCacheModel.paymentGateStatusCode = null;
		}

		tempDebitNoteCacheModel.paymentGateResponseData = getPaymentGateResponseData();

		String paymentGateResponseData = tempDebitNoteCacheModel.paymentGateResponseData;

		if ((paymentGateResponseData != null) &&
				(paymentGateResponseData.length() == 0)) {
			tempDebitNoteCacheModel.paymentGateResponseData = null;
		}

		tempDebitNoteCacheModel.paymentGateCheckCode = getPaymentGateCheckCode();

		tempDebitNoteCacheModel.paymentGateCheckResponseData = getPaymentGateCheckResponseData();

		String paymentGateCheckResponseData = tempDebitNoteCacheModel.paymentGateCheckResponseData;

		if ((paymentGateCheckResponseData != null) &&
				(paymentGateCheckResponseData.length() == 0)) {
			tempDebitNoteCacheModel.paymentGateCheckResponseData = null;
		}

		tempDebitNoteCacheModel.keypayURL = getKeypayURL();

		String keypayURL = tempDebitNoteCacheModel.keypayURL;

		if ((keypayURL != null) && (keypayURL.length() == 0)) {
			tempDebitNoteCacheModel.keypayURL = null;
		}

		tempDebitNoteCacheModel.currency = getCurrency();

		String currency = tempDebitNoteCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			tempDebitNoteCacheModel.currency = null;
		}

		return tempDebitNoteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", ATTACHEDFILE=");
		sb.append(getATTACHEDFILE());
		sb.append(", corporationid=");
		sb.append(getCorporationid());
		sb.append(", debitnotenumber=");
		sb.append(getDebitnotenumber());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", financialaccountant=");
		sb.append(getFinancialaccountant());
		sb.append(", fromdate=");
		sb.append(getFromdate());
		sb.append(", markasdeleted=");
		sb.append(getMarkasdeleted());
		sb.append(", organization=");
		sb.append(getOrganization());
		sb.append(", paymenttype=");
		sb.append(getPaymenttype());
		sb.append(", reportby=");
		sb.append(getReportby());
		sb.append(", reportdate=");
		sb.append(getReportdate());
		sb.append(", todate=");
		sb.append(getTodate());
		sb.append(", totalpayment=");
		sb.append(getTotalpayment());
		sb.append(", transactionid=");
		sb.append(getTransactionid());
		sb.append(", mariTimeCode=");
		sb.append(getMariTimeCode());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", documentTypeCode=");
		sb.append(getDocumentTypeCode());
		sb.append(", keypayGoodCode=");
		sb.append(getKeypayGoodCode());
		sb.append(", keypayMerchantCode=");
		sb.append(getKeypayMerchantCode());
		sb.append(", paymentGateStatusCode=");
		sb.append(getPaymentGateStatusCode());
		sb.append(", paymentGateResponseData=");
		sb.append(getPaymentGateResponseData());
		sb.append(", paymentGateCheckCode=");
		sb.append(getPaymentGateCheckCode());
		sb.append(", paymentGateCheckResponseData=");
		sb.append(getPaymentGateCheckResponseData());
		sb.append(", keypayURL=");
		sb.append(getKeypayURL());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.result.model.TempDebitNote");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ATTACHEDFILE</column-name><column-value><![CDATA[");
		sb.append(getATTACHEDFILE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationid</column-name><column-value><![CDATA[");
		sb.append(getCorporationid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debitnotenumber</column-name><column-value><![CDATA[");
		sb.append(getDebitnotenumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>financialaccountant</column-name><column-value><![CDATA[");
		sb.append(getFinancialaccountant());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromdate</column-name><column-value><![CDATA[");
		sb.append(getFromdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markasdeleted</column-name><column-value><![CDATA[");
		sb.append(getMarkasdeleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization</column-name><column-value><![CDATA[");
		sb.append(getOrganization());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymenttype</column-name><column-value><![CDATA[");
		sb.append(getPaymenttype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportby</column-name><column-value><![CDATA[");
		sb.append(getReportby());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportdate</column-name><column-value><![CDATA[");
		sb.append(getReportdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>todate</column-name><column-value><![CDATA[");
		sb.append(getTodate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalpayment</column-name><column-value><![CDATA[");
		sb.append(getTotalpayment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionid</column-name><column-value><![CDATA[");
		sb.append(getTransactionid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mariTimeCode</column-name><column-value><![CDATA[");
		sb.append(getMariTimeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentTypeCode</column-name><column-value><![CDATA[");
		sb.append(getDocumentTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keypayGoodCode</column-name><column-value><![CDATA[");
		sb.append(getKeypayGoodCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keypayMerchantCode</column-name><column-value><![CDATA[");
		sb.append(getKeypayMerchantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentGateStatusCode</column-name><column-value><![CDATA[");
		sb.append(getPaymentGateStatusCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentGateResponseData</column-name><column-value><![CDATA[");
		sb.append(getPaymentGateResponseData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentGateCheckCode</column-name><column-value><![CDATA[");
		sb.append(getPaymentGateCheckCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentGateCheckResponseData</column-name><column-value><![CDATA[");
		sb.append(getPaymentGateCheckResponseData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keypayURL</column-name><column-value><![CDATA[");
		sb.append(getKeypayURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempDebitNote.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempDebitNote.class
		};
	private long _id;
	private long _ATTACHEDFILE;
	private String _corporationid;
	private String _debitnotenumber;
	private String _originalDebitnotenumber;
	private String _division;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _financialaccountant;
	private Date _fromdate;
	private int _markasdeleted;
	private int _originalMarkasdeleted;
	private boolean _setOriginalMarkasdeleted;
	private String _organization;
	private int _paymenttype;
	private String _reportby;
	private Date _reportdate;
	private Date _todate;
	private double _totalpayment;
	private String _transactionid;
	private String _originalTransactionid;
	private int _mariTimeCode;
	private int _originalMariTimeCode;
	private boolean _setOriginalMariTimeCode;
	private String _comments;
	private String _documentTypeCode;
	private String _originalDocumentTypeCode;
	private String _keypayGoodCode;
	private String _keypayMerchantCode;
	private String _paymentGateStatusCode;
	private String _paymentGateResponseData;
	private int _paymentGateCheckCode;
	private String _paymentGateCheckResponseData;
	private String _keypayURL;
	private String _currency;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempDebitNote _escapedModelProxy;
}