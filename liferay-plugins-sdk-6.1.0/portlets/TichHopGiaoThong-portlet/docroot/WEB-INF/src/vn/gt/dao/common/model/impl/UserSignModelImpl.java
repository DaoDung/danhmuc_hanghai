/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.common.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.common.model.UserSign;
import vn.gt.dao.common.model.UserSignModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the UserSign service. Represents a row in the &quot;user_sign&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.common.model.UserSignModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserSignImpl}.
 * </p>
 *
 * @author win_64
 * @see UserSignImpl
 * @see vn.gt.dao.common.model.UserSign
 * @see vn.gt.dao.common.model.UserSignModel
 * @generated
 */
public class UserSignModelImpl extends BaseModelImpl<UserSign>
	implements UserSignModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user sign model instance should use the {@link vn.gt.dao.common.model.UserSign} interface instead.
	 */
	public static final String TABLE_NAME = "user_sign";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "userid", Types.BIGINT },
			{ "portcode", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "representative", Types.VARCHAR },
			{ "filechukyid", Types.BIGINT },
			{ "filecondauid", Types.BIGINT },
			{ "filechungthusoid", Types.BIGINT },
			{ "modifyuser", Types.VARCHAR },
			{ "modifydate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table user_sign (id LONG not null primary key,userid LONG,portcode VARCHAR(75) null,title VARCHAR(75) null,representative VARCHAR(75) null,filechukyid LONG,filecondauid LONG,filechungthusoid LONG,modifyuser VARCHAR(75) null,modifydate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table user_sign";
	public static final String ORDER_BY_JPQL = " ORDER BY userSign.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY user_sign.id ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.common.model.UserSign"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.common.model.UserSign"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.common.model.UserSign"),
			true);
	public static long PORTCODE_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.common.model.UserSign"));

	public UserSignModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return UserSign.class;
	}

	public String getModelClassName() {
		return UserSign.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getPortCode() {
		if (_portCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portCode;
		}
	}

	public void setPortCode(String portCode) {
		_columnBitmask |= PORTCODE_COLUMN_BITMASK;

		if (_originalPortCode == null) {
			_originalPortCode = _portCode;
		}

		_portCode = portCode;
	}

	public String getOriginalPortCode() {
		return GetterUtil.getString(_originalPortCode);
	}

	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	public String getRepresentative() {
		if (_representative == null) {
			return StringPool.BLANK;
		}
		else {
			return _representative;
		}
	}

	public void setRepresentative(String representative) {
		_representative = representative;
	}

	public long getFileChuKyId() {
		return _fileChuKyId;
	}

	public void setFileChuKyId(long fileChuKyId) {
		_fileChuKyId = fileChuKyId;
	}

	public long getFileConDauId() {
		return _fileConDauId;
	}

	public void setFileConDauId(long fileConDauId) {
		_fileConDauId = fileConDauId;
	}

	public long getFileChungThuSoId() {
		return _fileChungThuSoId;
	}

	public void setFileChungThuSoId(long fileChungThuSoId) {
		_fileChungThuSoId = fileChungThuSoId;
	}

	public String getModifyUser() {
		if (_modifyUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifyUser;
		}
	}

	public void setModifyUser(String modifyUser) {
		_modifyUser = modifyUser;
	}

	public Date getModifyDate() {
		return _modifyDate;
	}

	public void setModifyDate(Date modifyDate) {
		_modifyDate = modifyDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserSign toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (UserSign)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					UserSign.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		UserSignImpl userSignImpl = new UserSignImpl();

		userSignImpl.setId(getId());
		userSignImpl.setUserId(getUserId());
		userSignImpl.setPortCode(getPortCode());
		userSignImpl.setTitle(getTitle());
		userSignImpl.setRepresentative(getRepresentative());
		userSignImpl.setFileChuKyId(getFileChuKyId());
		userSignImpl.setFileConDauId(getFileConDauId());
		userSignImpl.setFileChungThuSoId(getFileChungThuSoId());
		userSignImpl.setModifyUser(getModifyUser());
		userSignImpl.setModifyDate(getModifyDate());

		userSignImpl.resetOriginalValues();

		return userSignImpl;
	}

	public int compareTo(UserSign userSign) {
		int value = 0;

		if (getId() < userSign.getId()) {
			value = -1;
		}
		else if (getId() > userSign.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		UserSign userSign = null;

		try {
			userSign = (UserSign)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = userSign.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserSignModelImpl userSignModelImpl = this;

		userSignModelImpl._originalUserId = userSignModelImpl._userId;

		userSignModelImpl._setOriginalUserId = false;

		userSignModelImpl._originalPortCode = userSignModelImpl._portCode;

		userSignModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserSign> toCacheModel() {
		UserSignCacheModel userSignCacheModel = new UserSignCacheModel();

		userSignCacheModel.id = getId();

		userSignCacheModel.userId = getUserId();

		userSignCacheModel.portCode = getPortCode();

		String portCode = userSignCacheModel.portCode;

		if ((portCode != null) && (portCode.length() == 0)) {
			userSignCacheModel.portCode = null;
		}

		userSignCacheModel.title = getTitle();

		String title = userSignCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			userSignCacheModel.title = null;
		}

		userSignCacheModel.representative = getRepresentative();

		String representative = userSignCacheModel.representative;

		if ((representative != null) && (representative.length() == 0)) {
			userSignCacheModel.representative = null;
		}

		userSignCacheModel.fileChuKyId = getFileChuKyId();

		userSignCacheModel.fileConDauId = getFileConDauId();

		userSignCacheModel.fileChungThuSoId = getFileChungThuSoId();

		userSignCacheModel.modifyUser = getModifyUser();

		String modifyUser = userSignCacheModel.modifyUser;

		if ((modifyUser != null) && (modifyUser.length() == 0)) {
			userSignCacheModel.modifyUser = null;
		}

		Date modifyDate = getModifyDate();

		if (modifyDate != null) {
			userSignCacheModel.modifyDate = modifyDate.getTime();
		}
		else {
			userSignCacheModel.modifyDate = Long.MIN_VALUE;
		}

		return userSignCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", portCode=");
		sb.append(getPortCode());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", representative=");
		sb.append(getRepresentative());
		sb.append(", fileChuKyId=");
		sb.append(getFileChuKyId());
		sb.append(", fileConDauId=");
		sb.append(getFileConDauId());
		sb.append(", fileChungThuSoId=");
		sb.append(getFileChungThuSoId());
		sb.append(", modifyUser=");
		sb.append(getModifyUser());
		sb.append(", modifyDate=");
		sb.append(getModifyDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.common.model.UserSign");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portCode</column-name><column-value><![CDATA[");
		sb.append(getPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>representative</column-name><column-value><![CDATA[");
		sb.append(getRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileChuKyId</column-name><column-value><![CDATA[");
		sb.append(getFileChuKyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileConDauId</column-name><column-value><![CDATA[");
		sb.append(getFileConDauId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileChungThuSoId</column-name><column-value><![CDATA[");
		sb.append(getFileChungThuSoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyUser</column-name><column-value><![CDATA[");
		sb.append(getModifyUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifyDate</column-name><column-value><![CDATA[");
		sb.append(getModifyDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserSign.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			UserSign.class
		};
	private long _id;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _portCode;
	private String _originalPortCode;
	private String _title;
	private String _representative;
	private long _fileChuKyId;
	private long _fileConDauId;
	private long _fileChungThuSoId;
	private String _modifyUser;
	private Date _modifyDate;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private UserSign _escapedModelProxy;
}