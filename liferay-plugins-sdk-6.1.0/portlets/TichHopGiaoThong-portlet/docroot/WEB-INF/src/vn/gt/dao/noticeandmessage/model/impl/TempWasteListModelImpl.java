/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempWasteList;
import vn.gt.dao.noticeandmessage.model.TempWasteListModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the TempWasteList service. Represents a row in the &quot;TEMP_WASTE_LIST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempWasteListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempWasteListImpl}.
 * </p>
 *
 * @author win_64
 * @see TempWasteListImpl
 * @see vn.gt.dao.noticeandmessage.model.TempWasteList
 * @see vn.gt.dao.noticeandmessage.model.TempWasteListModel
 * @generated
 */
public class TempWasteListModelImpl extends BaseModelImpl<TempWasteList>
	implements TempWasteListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp waste list model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempWasteList} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_WASTE_LIST";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "TypeCode", Types.VARCHAR },
			{ "TypeName", Types.VARCHAR },
			{ "Weight", Types.DOUBLE },
			{ "Unit", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_WASTE_LIST (ID LONG not null primary key,RequestCode VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,TypeCode VARCHAR(75) null,TypeName VARCHAR(75) null,Weight DOUBLE,Unit VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_WASTE_LIST";
	public static final String ORDER_BY_JPQL = " ORDER BY tempWasteList.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_WASTE_LIST.ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempWasteList"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempWasteList"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempWasteList"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long TYPECODE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempWasteList"));

	public TempWasteListModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempWasteList.class;
	}

	public String getModelClassName() {
		return TempWasteList.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	public String getTypeCode() {
		if (_typeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeCode;
		}
	}

	public void setTypeCode(String typeCode) {
		_columnBitmask |= TYPECODE_COLUMN_BITMASK;

		if (_originalTypeCode == null) {
			_originalTypeCode = _typeCode;
		}

		_typeCode = typeCode;
	}

	public String getOriginalTypeCode() {
		return GetterUtil.getString(_originalTypeCode);
	}

	public String getTypeName() {
		if (_typeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeName;
		}
	}

	public void setTypeName(String typeName) {
		_typeName = typeName;
	}

	public double getWeight() {
		return _weight;
	}

	public void setWeight(double weight) {
		_weight = weight;
	}

	public String getUnit() {
		if (_unit == null) {
			return StringPool.BLANK;
		}
		else {
			return _unit;
		}
	}

	public void setUnit(String unit) {
		_unit = unit;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempWasteList toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempWasteList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempWasteList.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempWasteListImpl tempWasteListImpl = new TempWasteListImpl();

		tempWasteListImpl.setId(getId());
		tempWasteListImpl.setRequestCode(getRequestCode());
		tempWasteListImpl.setDocumentName(getDocumentName());
		tempWasteListImpl.setDocumentYear(getDocumentYear());
		tempWasteListImpl.setTypeCode(getTypeCode());
		tempWasteListImpl.setTypeName(getTypeName());
		tempWasteListImpl.setWeight(getWeight());
		tempWasteListImpl.setUnit(getUnit());

		tempWasteListImpl.resetOriginalValues();

		return tempWasteListImpl;
	}

	public int compareTo(TempWasteList tempWasteList) {
		int value = 0;

		if (getId() < tempWasteList.getId()) {
			value = -1;
		}
		else if (getId() > tempWasteList.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempWasteList tempWasteList = null;

		try {
			tempWasteList = (TempWasteList)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempWasteList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempWasteListModelImpl tempWasteListModelImpl = this;

		tempWasteListModelImpl._originalRequestCode = tempWasteListModelImpl._requestCode;

		tempWasteListModelImpl._originalDocumentName = tempWasteListModelImpl._documentName;

		tempWasteListModelImpl._setOriginalDocumentName = false;

		tempWasteListModelImpl._originalDocumentYear = tempWasteListModelImpl._documentYear;

		tempWasteListModelImpl._setOriginalDocumentYear = false;

		tempWasteListModelImpl._originalTypeCode = tempWasteListModelImpl._typeCode;

		tempWasteListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempWasteList> toCacheModel() {
		TempWasteListCacheModel tempWasteListCacheModel = new TempWasteListCacheModel();

		tempWasteListCacheModel.id = getId();

		tempWasteListCacheModel.requestCode = getRequestCode();

		String requestCode = tempWasteListCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempWasteListCacheModel.requestCode = null;
		}

		tempWasteListCacheModel.documentName = getDocumentName();

		tempWasteListCacheModel.documentYear = getDocumentYear();

		tempWasteListCacheModel.typeCode = getTypeCode();

		String typeCode = tempWasteListCacheModel.typeCode;

		if ((typeCode != null) && (typeCode.length() == 0)) {
			tempWasteListCacheModel.typeCode = null;
		}

		tempWasteListCacheModel.typeName = getTypeName();

		String typeName = tempWasteListCacheModel.typeName;

		if ((typeName != null) && (typeName.length() == 0)) {
			tempWasteListCacheModel.typeName = null;
		}

		tempWasteListCacheModel.weight = getWeight();

		tempWasteListCacheModel.unit = getUnit();

		String unit = tempWasteListCacheModel.unit;

		if ((unit != null) && (unit.length() == 0)) {
			tempWasteListCacheModel.unit = null;
		}

		return tempWasteListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", typeCode=");
		sb.append(getTypeCode());
		sb.append(", typeName=");
		sb.append(getTypeName());
		sb.append(", weight=");
		sb.append(getWeight());
		sb.append(", unit=");
		sb.append(getUnit());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempWasteList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeCode</column-name><column-value><![CDATA[");
		sb.append(getTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeName</column-name><column-value><![CDATA[");
		sb.append(getTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weight</column-name><column-value><![CDATA[");
		sb.append(getWeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unit</column-name><column-value><![CDATA[");
		sb.append(getUnit());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempWasteList.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempWasteList.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _typeCode;
	private String _originalTypeCode;
	private String _typeName;
	private double _weight;
	private String _unit;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempWasteList _escapedModelProxy;
}