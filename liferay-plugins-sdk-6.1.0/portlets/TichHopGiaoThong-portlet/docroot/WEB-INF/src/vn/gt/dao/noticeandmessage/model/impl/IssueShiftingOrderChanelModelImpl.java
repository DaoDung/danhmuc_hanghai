/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel;
import vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanelModel;
import vn.gt.dao.noticeandmessage.service.persistence.IssueShiftingOrderChanelPK;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the IssueShiftingOrderChanel service. Represents a row in the &quot;ISSUE_SHIFTING_ORDER_CHANEL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueShiftingOrderChanelImpl}.
 * </p>
 *
 * @author win_64
 * @see IssueShiftingOrderChanelImpl
 * @see vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel
 * @see vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanelModel
 * @generated
 */
public class IssueShiftingOrderChanelModelImpl extends BaseModelImpl<IssueShiftingOrderChanel>
	implements IssueShiftingOrderChanelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue shifting order chanel model instance should use the {@link vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel} interface instead.
	 */
	public static final String TABLE_NAME = "ISSUE_SHIFTING_ORDER_CHANEL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ShiftingOrderId", Types.BIGINT },
			{ "ChanelCode", Types.VARCHAR },
			{ "chanelName", Types.VARCHAR },
			{ "Order_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ISSUE_SHIFTING_ORDER_CHANEL (ShiftingOrderId LONG not null,ChanelCode VARCHAR(75) not null,chanelName VARCHAR(75) null,Order_ INTEGER,primary key (ShiftingOrderId, ChanelCode))";
	public static final String TABLE_SQL_DROP = "drop table ISSUE_SHIFTING_ORDER_CHANEL";
	public static final String ORDER_BY_JPQL = " ORDER BY issueShiftingOrderChanel.order ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ISSUE_SHIFTING_ORDER_CHANEL.Order_ ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel"),
			true);
	public static long SHIFTINGORDERID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel"));

	public IssueShiftingOrderChanelModelImpl() {
	}

	public IssueShiftingOrderChanelPK getPrimaryKey() {
		return new IssueShiftingOrderChanelPK(_shiftingOrderId, _chanelCode);
	}

	public void setPrimaryKey(IssueShiftingOrderChanelPK primaryKey) {
		setShiftingOrderId(primaryKey.shiftingOrderId);
		setChanelCode(primaryKey.chanelCode);
	}

	public Serializable getPrimaryKeyObj() {
		return new IssueShiftingOrderChanelPK(_shiftingOrderId, _chanelCode);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((IssueShiftingOrderChanelPK)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return IssueShiftingOrderChanel.class;
	}

	public String getModelClassName() {
		return IssueShiftingOrderChanel.class.getName();
	}

	public long getShiftingOrderId() {
		return _shiftingOrderId;
	}

	public void setShiftingOrderId(long shiftingOrderId) {
		_columnBitmask |= SHIFTINGORDERID_COLUMN_BITMASK;

		if (!_setOriginalShiftingOrderId) {
			_setOriginalShiftingOrderId = true;

			_originalShiftingOrderId = _shiftingOrderId;
		}

		_shiftingOrderId = shiftingOrderId;
	}

	public long getOriginalShiftingOrderId() {
		return _originalShiftingOrderId;
	}

	public String getChanelCode() {
		if (_chanelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _chanelCode;
		}
	}

	public void setChanelCode(String chanelCode) {
		_chanelCode = chanelCode;
	}

	public String getChanelName() {
		if (_chanelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _chanelName;
		}
	}

	public void setChanelName(String chanelName) {
		_chanelName = chanelName;
	}

	public int getOrder() {
		return _order;
	}

	public void setOrder(int order) {
		_columnBitmask = -1L;

		_order = order;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public IssueShiftingOrderChanel toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (IssueShiftingOrderChanel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		IssueShiftingOrderChanelImpl issueShiftingOrderChanelImpl = new IssueShiftingOrderChanelImpl();

		issueShiftingOrderChanelImpl.setShiftingOrderId(getShiftingOrderId());
		issueShiftingOrderChanelImpl.setChanelCode(getChanelCode());
		issueShiftingOrderChanelImpl.setChanelName(getChanelName());
		issueShiftingOrderChanelImpl.setOrder(getOrder());

		issueShiftingOrderChanelImpl.resetOriginalValues();

		return issueShiftingOrderChanelImpl;
	}

	public int compareTo(IssueShiftingOrderChanel issueShiftingOrderChanel) {
		int value = 0;

		if (getOrder() < issueShiftingOrderChanel.getOrder()) {
			value = -1;
		}
		else if (getOrder() > issueShiftingOrderChanel.getOrder()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		IssueShiftingOrderChanel issueShiftingOrderChanel = null;

		try {
			issueShiftingOrderChanel = (IssueShiftingOrderChanel)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		IssueShiftingOrderChanelPK primaryKey = issueShiftingOrderChanel.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		IssueShiftingOrderChanelModelImpl issueShiftingOrderChanelModelImpl = this;

		issueShiftingOrderChanelModelImpl._originalShiftingOrderId = issueShiftingOrderChanelModelImpl._shiftingOrderId;

		issueShiftingOrderChanelModelImpl._setOriginalShiftingOrderId = false;

		issueShiftingOrderChanelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IssueShiftingOrderChanel> toCacheModel() {
		IssueShiftingOrderChanelCacheModel issueShiftingOrderChanelCacheModel = new IssueShiftingOrderChanelCacheModel();

		issueShiftingOrderChanelCacheModel.shiftingOrderId = getShiftingOrderId();

		issueShiftingOrderChanelCacheModel.chanelCode = getChanelCode();

		String chanelCode = issueShiftingOrderChanelCacheModel.chanelCode;

		if ((chanelCode != null) && (chanelCode.length() == 0)) {
			issueShiftingOrderChanelCacheModel.chanelCode = null;
		}

		issueShiftingOrderChanelCacheModel.chanelName = getChanelName();

		String chanelName = issueShiftingOrderChanelCacheModel.chanelName;

		if ((chanelName != null) && (chanelName.length() == 0)) {
			issueShiftingOrderChanelCacheModel.chanelName = null;
		}

		issueShiftingOrderChanelCacheModel.order = getOrder();

		return issueShiftingOrderChanelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{shiftingOrderId=");
		sb.append(getShiftingOrderId());
		sb.append(", chanelCode=");
		sb.append(getChanelCode());
		sb.append(", chanelName=");
		sb.append(getChanelName());
		sb.append(", order=");
		sb.append(getOrder());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.IssueShiftingOrderChanel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>shiftingOrderId</column-name><column-value><![CDATA[");
		sb.append(getShiftingOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chanelCode</column-name><column-value><![CDATA[");
		sb.append(getChanelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chanelName</column-name><column-value><![CDATA[");
		sb.append(getChanelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>order</column-name><column-value><![CDATA[");
		sb.append(getOrder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IssueShiftingOrderChanel.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			IssueShiftingOrderChanel.class
		};
	private long _shiftingOrderId;
	private long _originalShiftingOrderId;
	private boolean _setOriginalShiftingOrderId;
	private String _chanelCode;
	private String _chanelName;
	private int _order;
	private long _columnBitmask;
	private IssueShiftingOrderChanel _escapedModelProxy;
}