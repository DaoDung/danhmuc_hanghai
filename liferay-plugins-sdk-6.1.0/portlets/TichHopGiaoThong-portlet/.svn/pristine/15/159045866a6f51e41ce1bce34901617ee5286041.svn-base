/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempPersonList;
import vn.gt.dao.noticeandmessage.model.TempPersonListModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the TempPersonList service. Represents a row in the &quot;TEMP_PERSON_LIST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempPersonListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempPersonListImpl}.
 * </p>
 *
 * @author win_64
 * @see TempPersonListImpl
 * @see vn.gt.dao.noticeandmessage.model.TempPersonList
 * @see vn.gt.dao.noticeandmessage.model.TempPersonListModel
 * @generated
 */
public class TempPersonListModelImpl extends BaseModelImpl<TempPersonList>
	implements TempPersonListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp person list model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempPersonList} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_PERSON_LIST";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "Name", Types.VARCHAR },
			{ "Age", Types.VARCHAR },
			{ "NationalCode", Types.VARCHAR },
			{ "NationalName", Types.VARCHAR },
			{ "IlnessStatus", Types.VARCHAR },
			{ "ReasonOfDead", Types.VARCHAR },
			{ "PersonType", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_PERSON_LIST (ID LONG not null primary key,RequestCode VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,Name VARCHAR(75) null,Age VARCHAR(75) null,NationalCode VARCHAR(75) null,NationalName VARCHAR(75) null,IlnessStatus VARCHAR(75) null,ReasonOfDead VARCHAR(75) null,PersonType INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_PERSON_LIST";
	public static final String ORDER_BY_JPQL = " ORDER BY tempPersonList.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_PERSON_LIST.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempPersonList"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempPersonList"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempPersonList"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempPersonList"));

	public TempPersonListModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempPersonList.class;
	}

	public String getModelClassName() {
		return TempPersonList.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public String getAge() {
		if (_age == null) {
			return StringPool.BLANK;
		}
		else {
			return _age;
		}
	}

	public void setAge(String age) {
		_age = age;
	}

	public String getNationalCode() {
		if (_nationalCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationalCode;
		}
	}

	public void setNationalCode(String nationalCode) {
		_nationalCode = nationalCode;
	}

	public String getNationalName() {
		if (_nationalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationalName;
		}
	}

	public void setNationalName(String nationalName) {
		_nationalName = nationalName;
	}

	public String getIlnessStatus() {
		if (_ilnessStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _ilnessStatus;
		}
	}

	public void setIlnessStatus(String ilnessStatus) {
		_ilnessStatus = ilnessStatus;
	}

	public String getReasonOfDead() {
		if (_reasonOfDead == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonOfDead;
		}
	}

	public void setReasonOfDead(String reasonOfDead) {
		_reasonOfDead = reasonOfDead;
	}

	public int getPersonType() {
		return _personType;
	}

	public void setPersonType(int personType) {
		_personType = personType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempPersonList toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempPersonList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempPersonList.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempPersonListImpl tempPersonListImpl = new TempPersonListImpl();

		tempPersonListImpl.setId(getId());
		tempPersonListImpl.setRequestCode(getRequestCode());
		tempPersonListImpl.setDocumentName(getDocumentName());
		tempPersonListImpl.setDocumentYear(getDocumentYear());
		tempPersonListImpl.setName(getName());
		tempPersonListImpl.setAge(getAge());
		tempPersonListImpl.setNationalCode(getNationalCode());
		tempPersonListImpl.setNationalName(getNationalName());
		tempPersonListImpl.setIlnessStatus(getIlnessStatus());
		tempPersonListImpl.setReasonOfDead(getReasonOfDead());
		tempPersonListImpl.setPersonType(getPersonType());

		tempPersonListImpl.resetOriginalValues();

		return tempPersonListImpl;
	}

	public int compareTo(TempPersonList tempPersonList) {
		int value = 0;

		if (getId() < tempPersonList.getId()) {
			value = -1;
		}
		else if (getId() > tempPersonList.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempPersonList tempPersonList = null;

		try {
			tempPersonList = (TempPersonList)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempPersonList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempPersonListModelImpl tempPersonListModelImpl = this;

		tempPersonListModelImpl._originalRequestCode = tempPersonListModelImpl._requestCode;

		tempPersonListModelImpl._originalDocumentName = tempPersonListModelImpl._documentName;

		tempPersonListModelImpl._setOriginalDocumentName = false;

		tempPersonListModelImpl._originalDocumentYear = tempPersonListModelImpl._documentYear;

		tempPersonListModelImpl._setOriginalDocumentYear = false;

		tempPersonListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempPersonList> toCacheModel() {
		TempPersonListCacheModel tempPersonListCacheModel = new TempPersonListCacheModel();

		tempPersonListCacheModel.id = getId();

		tempPersonListCacheModel.requestCode = getRequestCode();

		String requestCode = tempPersonListCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempPersonListCacheModel.requestCode = null;
		}

		tempPersonListCacheModel.documentName = getDocumentName();

		tempPersonListCacheModel.documentYear = getDocumentYear();

		tempPersonListCacheModel.name = getName();

		String name = tempPersonListCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			tempPersonListCacheModel.name = null;
		}

		tempPersonListCacheModel.age = getAge();

		String age = tempPersonListCacheModel.age;

		if ((age != null) && (age.length() == 0)) {
			tempPersonListCacheModel.age = null;
		}

		tempPersonListCacheModel.nationalCode = getNationalCode();

		String nationalCode = tempPersonListCacheModel.nationalCode;

		if ((nationalCode != null) && (nationalCode.length() == 0)) {
			tempPersonListCacheModel.nationalCode = null;
		}

		tempPersonListCacheModel.nationalName = getNationalName();

		String nationalName = tempPersonListCacheModel.nationalName;

		if ((nationalName != null) && (nationalName.length() == 0)) {
			tempPersonListCacheModel.nationalName = null;
		}

		tempPersonListCacheModel.ilnessStatus = getIlnessStatus();

		String ilnessStatus = tempPersonListCacheModel.ilnessStatus;

		if ((ilnessStatus != null) && (ilnessStatus.length() == 0)) {
			tempPersonListCacheModel.ilnessStatus = null;
		}

		tempPersonListCacheModel.reasonOfDead = getReasonOfDead();

		String reasonOfDead = tempPersonListCacheModel.reasonOfDead;

		if ((reasonOfDead != null) && (reasonOfDead.length() == 0)) {
			tempPersonListCacheModel.reasonOfDead = null;
		}

		tempPersonListCacheModel.personType = getPersonType();

		return tempPersonListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", nationalCode=");
		sb.append(getNationalCode());
		sb.append(", nationalName=");
		sb.append(getNationalName());
		sb.append(", ilnessStatus=");
		sb.append(getIlnessStatus());
		sb.append(", reasonOfDead=");
		sb.append(getReasonOfDead());
		sb.append(", personType=");
		sb.append(getPersonType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempPersonList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationalCode</column-name><column-value><![CDATA[");
		sb.append(getNationalCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationalName</column-name><column-value><![CDATA[");
		sb.append(getNationalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ilnessStatus</column-name><column-value><![CDATA[");
		sb.append(getIlnessStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonOfDead</column-name><column-value><![CDATA[");
		sb.append(getReasonOfDead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personType</column-name><column-value><![CDATA[");
		sb.append(getPersonType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempPersonList.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempPersonList.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _name;
	private String _age;
	private String _nationalCode;
	private String _nationalName;
	private String _ilnessStatus;
	private String _reasonOfDead;
	private int _personType;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempPersonList _escapedModelProxy;
}