/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempCargoItems;
import vn.gt.dao.noticeandmessage.model.TempCargoItemsModel;
import vn.gt.dao.noticeandmessage.model.TempCargoItemsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the TempCargoItems service. Represents a row in the &quot;TEMP_CARGO_ITEMS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempCargoItemsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempCargoItemsImpl}.
 * </p>
 *
 * @author win_64
 * @see TempCargoItemsImpl
 * @see vn.gt.dao.noticeandmessage.model.TempCargoItems
 * @see vn.gt.dao.noticeandmessage.model.TempCargoItemsModel
 * @generated
 */
@JSON(strict = true)
public class TempCargoItemsModelImpl extends BaseModelImpl<TempCargoItems>
	implements TempCargoItemsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp cargo items model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempCargoItems} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_CARGO_ITEMS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "CargoCategory", Types.VARCHAR },
			{ "CargoType", Types.VARCHAR },
			{ "CargoCode", Types.VARCHAR },
			{ "Description", Types.VARCHAR },
			{ "Quantity", Types.DOUBLE },
			{ "Unit", Types.VARCHAR },
			{ "Sequence", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_CARGO_ITEMS (ID LONG not null primary key,RequestCode VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,CargoCategory VARCHAR(75) null,CargoType VARCHAR(75) null,CargoCode VARCHAR(75) null,Description VARCHAR(75) null,Quantity DOUBLE,Unit VARCHAR(75) null,Sequence INTEGER,ModifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_CARGO_ITEMS";
	public static final String ORDER_BY_JPQL = " ORDER BY tempCargoItems.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_CARGO_ITEMS.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempCargoItems"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempCargoItems"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempCargoItems"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempCargoItems toModel(TempCargoItemsSoap soapModel) {
		TempCargoItems model = new TempCargoItemsImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setCargoCategory(soapModel.getCargoCategory());
		model.setCargoType(soapModel.getCargoType());
		model.setCargoCode(soapModel.getCargoCode());
		model.setDescription(soapModel.getDescription());
		model.setQuantity(soapModel.getQuantity());
		model.setUnit(soapModel.getUnit());
		model.setSequence(soapModel.getSequence());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempCargoItems> toModels(TempCargoItemsSoap[] soapModels) {
		List<TempCargoItems> models = new ArrayList<TempCargoItems>(soapModels.length);

		for (TempCargoItemsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempCargoItems"));

	public TempCargoItemsModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempCargoItems.class;
	}

	public String getModelClassName() {
		return TempCargoItems.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	public long getDocumentName() {
		return _documentName;
	}

	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	public int getDocumentYear() {
		return _documentYear;
	}

	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	public String getCargoCategory() {
		if (_cargoCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _cargoCategory;
		}
	}

	public void setCargoCategory(String cargoCategory) {
		_cargoCategory = cargoCategory;
	}

	@JSON
	public String getCargoType() {
		if (_cargoType == null) {
			return StringPool.BLANK;
		}
		else {
			return _cargoType;
		}
	}

	public void setCargoType(String cargoType) {
		_cargoType = cargoType;
	}

	@JSON
	public String getCargoCode() {
		if (_cargoCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _cargoCode;
		}
	}

	public void setCargoCode(String cargoCode) {
		_cargoCode = cargoCode;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public double getQuantity() {
		return _quantity;
	}

	public void setQuantity(double quantity) {
		_quantity = quantity;
	}

	@JSON
	public String getUnit() {
		if (_unit == null) {
			return StringPool.BLANK;
		}
		else {
			return _unit;
		}
	}

	public void setUnit(String unit) {
		_unit = unit;
	}

	@JSON
	public int getSequence() {
		return _sequence;
	}

	public void setSequence(int sequence) {
		_sequence = sequence;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempCargoItems toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempCargoItems)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempCargoItems.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempCargoItemsImpl tempCargoItemsImpl = new TempCargoItemsImpl();

		tempCargoItemsImpl.setId(getId());
		tempCargoItemsImpl.setRequestCode(getRequestCode());
		tempCargoItemsImpl.setDocumentName(getDocumentName());
		tempCargoItemsImpl.setDocumentYear(getDocumentYear());
		tempCargoItemsImpl.setCargoCategory(getCargoCategory());
		tempCargoItemsImpl.setCargoType(getCargoType());
		tempCargoItemsImpl.setCargoCode(getCargoCode());
		tempCargoItemsImpl.setDescription(getDescription());
		tempCargoItemsImpl.setQuantity(getQuantity());
		tempCargoItemsImpl.setUnit(getUnit());
		tempCargoItemsImpl.setSequence(getSequence());
		tempCargoItemsImpl.setModifiedDate(getModifiedDate());

		tempCargoItemsImpl.resetOriginalValues();

		return tempCargoItemsImpl;
	}

	public int compareTo(TempCargoItems tempCargoItems) {
		int value = 0;

		if (getId() < tempCargoItems.getId()) {
			value = -1;
		}
		else if (getId() > tempCargoItems.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempCargoItems tempCargoItems = null;

		try {
			tempCargoItems = (TempCargoItems)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempCargoItems.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempCargoItemsModelImpl tempCargoItemsModelImpl = this;

		tempCargoItemsModelImpl._originalRequestCode = tempCargoItemsModelImpl._requestCode;

		tempCargoItemsModelImpl._originalDocumentName = tempCargoItemsModelImpl._documentName;

		tempCargoItemsModelImpl._setOriginalDocumentName = false;

		tempCargoItemsModelImpl._originalDocumentYear = tempCargoItemsModelImpl._documentYear;

		tempCargoItemsModelImpl._setOriginalDocumentYear = false;

		tempCargoItemsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempCargoItems> toCacheModel() {
		TempCargoItemsCacheModel tempCargoItemsCacheModel = new TempCargoItemsCacheModel();

		tempCargoItemsCacheModel.id = getId();

		tempCargoItemsCacheModel.requestCode = getRequestCode();

		String requestCode = tempCargoItemsCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempCargoItemsCacheModel.requestCode = null;
		}

		tempCargoItemsCacheModel.documentName = getDocumentName();

		tempCargoItemsCacheModel.documentYear = getDocumentYear();

		tempCargoItemsCacheModel.cargoCategory = getCargoCategory();

		String cargoCategory = tempCargoItemsCacheModel.cargoCategory;

		if ((cargoCategory != null) && (cargoCategory.length() == 0)) {
			tempCargoItemsCacheModel.cargoCategory = null;
		}

		tempCargoItemsCacheModel.cargoType = getCargoType();

		String cargoType = tempCargoItemsCacheModel.cargoType;

		if ((cargoType != null) && (cargoType.length() == 0)) {
			tempCargoItemsCacheModel.cargoType = null;
		}

		tempCargoItemsCacheModel.cargoCode = getCargoCode();

		String cargoCode = tempCargoItemsCacheModel.cargoCode;

		if ((cargoCode != null) && (cargoCode.length() == 0)) {
			tempCargoItemsCacheModel.cargoCode = null;
		}

		tempCargoItemsCacheModel.description = getDescription();

		String description = tempCargoItemsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			tempCargoItemsCacheModel.description = null;
		}

		tempCargoItemsCacheModel.quantity = getQuantity();

		tempCargoItemsCacheModel.unit = getUnit();

		String unit = tempCargoItemsCacheModel.unit;

		if ((unit != null) && (unit.length() == 0)) {
			tempCargoItemsCacheModel.unit = null;
		}

		tempCargoItemsCacheModel.sequence = getSequence();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tempCargoItemsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tempCargoItemsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return tempCargoItemsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", cargoCategory=");
		sb.append(getCargoCategory());
		sb.append(", cargoType=");
		sb.append(getCargoType());
		sb.append(", cargoCode=");
		sb.append(getCargoCode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", unit=");
		sb.append(getUnit());
		sb.append(", sequence=");
		sb.append(getSequence());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempCargoItems");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargoCategory</column-name><column-value><![CDATA[");
		sb.append(getCargoCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargoType</column-name><column-value><![CDATA[");
		sb.append(getCargoType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargoCode</column-name><column-value><![CDATA[");
		sb.append(getCargoCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unit</column-name><column-value><![CDATA[");
		sb.append(getUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequence</column-name><column-value><![CDATA[");
		sb.append(getSequence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempCargoItems.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempCargoItems.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _cargoCategory;
	private String _cargoType;
	private String _cargoCode;
	private String _description;
	private double _quantity;
	private String _unit;
	private int _sequence;
	private Date _modifiedDate;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempCargoItems _escapedModelProxy;
}