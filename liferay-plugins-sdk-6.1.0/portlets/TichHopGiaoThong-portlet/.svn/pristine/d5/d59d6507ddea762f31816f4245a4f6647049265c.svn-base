/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.gt.dao.noticeandmessage.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig;
import vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfigModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the TempMaritimePaymentConfig service. Represents a row in the &quot;TEMP_MARITIME_PAYMENT_CONFIG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempMaritimePaymentConfigImpl}.
 * </p>
 *
 * @author win_64
 * @see TempMaritimePaymentConfigImpl
 * @see vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig
 * @see vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfigModel
 * @generated
 */
public class TempMaritimePaymentConfigModelImpl extends BaseModelImpl<TempMaritimePaymentConfig>
	implements TempMaritimePaymentConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp maritime payment config model instance should use the {@link vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_MARITIME_PAYMENT_CONFIG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "MARITIMECODE", Types.VARCHAR },
			{ "MERCHANTCODE", Types.VARCHAR },
			{ "MERCHANTKEY", Types.VARCHAR },
			{ "MERCHANTNAME", Types.VARCHAR },
			{ "KEYPAYDOMAIN", Types.VARCHAR },
			{ "KEYPAYVERSION", Types.VARCHAR },
			{ "RETURNURL", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_MARITIME_PAYMENT_CONFIG (ID LONG not null primary key,MARITIMECODE VARCHAR(75) null,MERCHANTCODE VARCHAR(75) null,MERCHANTKEY VARCHAR(75) null,MERCHANTNAME VARCHAR(75) null,KEYPAYDOMAIN VARCHAR(75) null,KEYPAYVERSION VARCHAR(75) null,RETURNURL VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_MARITIME_PAYMENT_CONFIG";
	public static final String ORDER_BY_JPQL = " ORDER BY tempMaritimePaymentConfig.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_MARITIME_PAYMENT_CONFIG.ID ASC";
	public static final String DATA_SOURCE = "gtDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig"),
			true);
	public static long MARITIMECODE_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig"));

	public TempMaritimePaymentConfigModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TempMaritimePaymentConfig.class;
	}

	public String getModelClassName() {
		return TempMaritimePaymentConfig.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	public String getMaritimeCode() {
		if (_maritimeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _maritimeCode;
		}
	}

	public void setMaritimeCode(String maritimeCode) {
		_columnBitmask |= MARITIMECODE_COLUMN_BITMASK;

		if (_originalMaritimeCode == null) {
			_originalMaritimeCode = _maritimeCode;
		}

		_maritimeCode = maritimeCode;
	}

	public String getOriginalMaritimeCode() {
		return GetterUtil.getString(_originalMaritimeCode);
	}

	public String getMerchantCode() {
		if (_merchantCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _merchantCode;
		}
	}

	public void setMerchantCode(String merchantCode) {
		_merchantCode = merchantCode;
	}

	public String getMerchantKey() {
		if (_merchantKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _merchantKey;
		}
	}

	public void setMerchantKey(String merchantKey) {
		_merchantKey = merchantKey;
	}

	public String getMerchantName() {
		if (_merchantName == null) {
			return StringPool.BLANK;
		}
		else {
			return _merchantName;
		}
	}

	public void setMerchantName(String merchantName) {
		_merchantName = merchantName;
	}

	public String getKeypayDomain() {
		if (_keypayDomain == null) {
			return StringPool.BLANK;
		}
		else {
			return _keypayDomain;
		}
	}

	public void setKeypayDomain(String keypayDomain) {
		_keypayDomain = keypayDomain;
	}

	public String getKeypayVersion() {
		if (_keypayVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _keypayVersion;
		}
	}

	public void setKeypayVersion(String keypayVersion) {
		_keypayVersion = keypayVersion;
	}

	public String getReturnURL() {
		if (_returnURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _returnURL;
		}
	}

	public void setReturnURL(String returnURL) {
		_returnURL = returnURL;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public TempMaritimePaymentConfig toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TempMaritimePaymentConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					TempMaritimePaymentConfig.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		TempMaritimePaymentConfigImpl tempMaritimePaymentConfigImpl = new TempMaritimePaymentConfigImpl();

		tempMaritimePaymentConfigImpl.setId(getId());
		tempMaritimePaymentConfigImpl.setMaritimeCode(getMaritimeCode());
		tempMaritimePaymentConfigImpl.setMerchantCode(getMerchantCode());
		tempMaritimePaymentConfigImpl.setMerchantKey(getMerchantKey());
		tempMaritimePaymentConfigImpl.setMerchantName(getMerchantName());
		tempMaritimePaymentConfigImpl.setKeypayDomain(getKeypayDomain());
		tempMaritimePaymentConfigImpl.setKeypayVersion(getKeypayVersion());
		tempMaritimePaymentConfigImpl.setReturnURL(getReturnURL());

		tempMaritimePaymentConfigImpl.resetOriginalValues();

		return tempMaritimePaymentConfigImpl;
	}

	public int compareTo(TempMaritimePaymentConfig tempMaritimePaymentConfig) {
		int value = 0;

		if (getId() < tempMaritimePaymentConfig.getId()) {
			value = -1;
		}
		else if (getId() > tempMaritimePaymentConfig.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TempMaritimePaymentConfig tempMaritimePaymentConfig = null;

		try {
			tempMaritimePaymentConfig = (TempMaritimePaymentConfig)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = tempMaritimePaymentConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempMaritimePaymentConfigModelImpl tempMaritimePaymentConfigModelImpl = this;

		tempMaritimePaymentConfigModelImpl._originalMaritimeCode = tempMaritimePaymentConfigModelImpl._maritimeCode;

		tempMaritimePaymentConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempMaritimePaymentConfig> toCacheModel() {
		TempMaritimePaymentConfigCacheModel tempMaritimePaymentConfigCacheModel = new TempMaritimePaymentConfigCacheModel();

		tempMaritimePaymentConfigCacheModel.id = getId();

		tempMaritimePaymentConfigCacheModel.maritimeCode = getMaritimeCode();

		String maritimeCode = tempMaritimePaymentConfigCacheModel.maritimeCode;

		if ((maritimeCode != null) && (maritimeCode.length() == 0)) {
			tempMaritimePaymentConfigCacheModel.maritimeCode = null;
		}

		tempMaritimePaymentConfigCacheModel.merchantCode = getMerchantCode();

		String merchantCode = tempMaritimePaymentConfigCacheModel.merchantCode;

		if ((merchantCode != null) && (merchantCode.length() == 0)) {
			tempMaritimePaymentConfigCacheModel.merchantCode = null;
		}

		tempMaritimePaymentConfigCacheModel.merchantKey = getMerchantKey();

		String merchantKey = tempMaritimePaymentConfigCacheModel.merchantKey;

		if ((merchantKey != null) && (merchantKey.length() == 0)) {
			tempMaritimePaymentConfigCacheModel.merchantKey = null;
		}

		tempMaritimePaymentConfigCacheModel.merchantName = getMerchantName();

		String merchantName = tempMaritimePaymentConfigCacheModel.merchantName;

		if ((merchantName != null) && (merchantName.length() == 0)) {
			tempMaritimePaymentConfigCacheModel.merchantName = null;
		}

		tempMaritimePaymentConfigCacheModel.keypayDomain = getKeypayDomain();

		String keypayDomain = tempMaritimePaymentConfigCacheModel.keypayDomain;

		if ((keypayDomain != null) && (keypayDomain.length() == 0)) {
			tempMaritimePaymentConfigCacheModel.keypayDomain = null;
		}

		tempMaritimePaymentConfigCacheModel.keypayVersion = getKeypayVersion();

		String keypayVersion = tempMaritimePaymentConfigCacheModel.keypayVersion;

		if ((keypayVersion != null) && (keypayVersion.length() == 0)) {
			tempMaritimePaymentConfigCacheModel.keypayVersion = null;
		}

		tempMaritimePaymentConfigCacheModel.returnURL = getReturnURL();

		String returnURL = tempMaritimePaymentConfigCacheModel.returnURL;

		if ((returnURL != null) && (returnURL.length() == 0)) {
			tempMaritimePaymentConfigCacheModel.returnURL = null;
		}

		return tempMaritimePaymentConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", maritimeCode=");
		sb.append(getMaritimeCode());
		sb.append(", merchantCode=");
		sb.append(getMerchantCode());
		sb.append(", merchantKey=");
		sb.append(getMerchantKey());
		sb.append(", merchantName=");
		sb.append(getMerchantName());
		sb.append(", keypayDomain=");
		sb.append(getKeypayDomain());
		sb.append(", keypayVersion=");
		sb.append(getKeypayVersion());
		sb.append(", returnURL=");
		sb.append(getReturnURL());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("vn.gt.dao.noticeandmessage.model.TempMaritimePaymentConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritimeCode</column-name><column-value><![CDATA[");
		sb.append(getMaritimeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>merchantCode</column-name><column-value><![CDATA[");
		sb.append(getMerchantCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>merchantKey</column-name><column-value><![CDATA[");
		sb.append(getMerchantKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>merchantName</column-name><column-value><![CDATA[");
		sb.append(getMerchantName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keypayDomain</column-name><column-value><![CDATA[");
		sb.append(getKeypayDomain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>keypayVersion</column-name><column-value><![CDATA[");
		sb.append(getKeypayVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>returnURL</column-name><column-value><![CDATA[");
		sb.append(getReturnURL());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempMaritimePaymentConfig.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TempMaritimePaymentConfig.class
		};
	private long _id;
	private String _maritimeCode;
	private String _originalMaritimeCode;
	private String _merchantCode;
	private String _merchantKey;
	private String _merchantName;
	private String _keypayDomain;
	private String _keypayVersion;
	private String _returnURL;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private TempMaritimePaymentConfig _escapedModelProxy;
}